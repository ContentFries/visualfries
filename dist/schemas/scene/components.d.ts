import { z } from 'zod';
/**
 * Structured Font Size as per schema-llm.md
 */
export declare const StructuredFontSizeShape: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
    value: number;
    unit: "px";
}, number>>, z.ZodObject<{
    value: z.ZodNumber;
    unit: z.ZodPrefault<z.ZodEnum<{
        px: "px";
        em: "em";
        rem: "rem";
        "%": "%";
    }>>;
}, z.core.$strip>]>;
export declare const StructuredEmSizeShape: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
    value: number;
    unit: "em";
}, number>>, z.ZodObject<{
    value: z.ZodNumber;
    unit: z.ZodPrefault<z.ZodEnum<{
        px: "px";
        em: "em";
        rem: "rem";
        "%": "%";
    }>>;
}, z.core.$strip>]>;
export declare const FontSourceShape: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    source: z.ZodEnum<{
        custom: "custom";
        google: "google";
    }>;
    family: z.ZodOptional<z.ZodString>;
    category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
    variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
    fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
}, z.core.$strip>;
/**
 * Basic appearance structure for text components matching schema-llm.md
 */
export declare const TextAppearanceShape: z.ZodObject<{
    fontFamily: z.ZodString;
    fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
        value: number;
        unit: "px";
    }, number>>, z.ZodObject<{
        value: z.ZodNumber;
        unit: z.ZodPrefault<z.ZodEnum<{
            px: "px";
            em: "em";
            rem: "rem";
            "%": "%";
        }>>;
    }, z.core.$strip>]>;
    fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
        normal: "normal";
        bold: "bold";
        bolder: "bolder";
        lighter: "lighter";
        100: "100";
        200: "200";
        300: "300";
        400: "400";
        500: "500";
        600: "600";
        700: "700";
        800: "800";
        900: "900";
    }>>>;
    fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        source: z.ZodEnum<{
            custom: "custom";
            google: "google";
        }>;
        family: z.ZodOptional<z.ZodString>;
        category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
        variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
        fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, z.core.$strip>>>;
    lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
        value: number;
        unit: "em";
    }, number>>, z.ZodObject<{
        value: z.ZodNumber;
        unit: z.ZodPrefault<z.ZodEnum<{
            px: "px";
            em: "em";
            rem: "rem";
            "%": "%";
        }>>;
    }, z.core.$strip>]>>>;
    letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
        value: number;
        unit: "em";
    }, number>>, z.ZodObject<{
        value: z.ZodNumber;
        unit: z.ZodPrefault<z.ZodEnum<{
            px: "px";
            em: "em";
            rem: "rem";
            "%": "%";
        }>>;
    }, z.core.$strip>]>>>;
    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
        type: z.ZodEnum<{
            linear: "linear";
            radial: "radial";
        }>;
        colors: z.ZodArray<z.ZodString>;
        stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
        angle: z.ZodOptional<z.ZodNumber>;
        position: z.ZodOptional<z.ZodString>;
        shape: z.ZodOptional<z.ZodEnum<{
            ellipse: "ellipse";
            circle: "circle";
        }>>;
    }, z.core.$strip>]>;
    textAlign: z.ZodEnum<{
        center: "center";
        left: "left";
        right: "right";
        justify: "justify";
    }>;
    textTransform: z.ZodOptional<z.ZodEnum<{
        none: "none";
        uppercase: "uppercase";
        lowercase: "lowercase";
        capitalize: "capitalize";
    }>>;
    shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        preset: z.ZodOptional<z.ZodString>;
        color: z.ZodOptional<z.ZodString>;
        blur: z.ZodOptional<z.ZodNumber>;
        size: z.ZodOptional<z.ZodNumber>;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodNumber>;
    }, z.core.$strip>>>;
    outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        preset: z.ZodOptional<z.ZodString>;
        color: z.ZodString;
        size: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodNumber>;
        style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
            solid: "solid";
            dashed: "dashed";
            dotted: "dotted";
        }>>>;
        dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
    }, z.core.$strip>>>;
    activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        enabled: z.ZodBoolean;
        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>>;
        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>>;
        fontWeight: z.ZodOptional<z.ZodEnum<{
            normal: "normal";
            bold: "bold";
            bolder: "bolder";
            lighter: "lighter";
            100: "100";
            200: "200";
            300: "300";
            400: "400";
            500: "500";
            600: "600";
            700: "700";
            800: "800";
            900: "900";
        }>>;
        scale: z.ZodOptional<z.ZodNumber>;
        backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
        backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
        backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
    }, z.core.$strip>>>;
    activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        enabled: z.ZodBoolean;
        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>>;
        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>>;
        fontWeight: z.ZodOptional<z.ZodEnum<{
            normal: "normal";
            bold: "bold";
            bolder: "bolder";
            lighter: "lighter";
            100: "100";
            200: "200";
            300: "300";
            400: "400";
            500: "500";
            600: "600";
            700: "700";
            800: "800";
            900: "900";
        }>>;
        scale: z.ZodOptional<z.ZodNumber>;
        backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
        backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
        backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
    }, z.core.$strip>>>;
    highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
        type: z.ZodEnum<{
            linear: "linear";
            radial: "radial";
        }>;
        colors: z.ZodArray<z.ZodString>;
        stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
        angle: z.ZodOptional<z.ZodNumber>;
        position: z.ZodOptional<z.ZodString>;
        shape: z.ZodOptional<z.ZodEnum<{
            ellipse: "ellipse";
            circle: "circle";
        }>>;
    }, z.core.$strip>]>>>>;
}, z.core.$strip>;
export declare const BackgroundShape: z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
    enabled: z.ZodPrefault<z.ZodBoolean>;
    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
        type: z.ZodEnum<{
            linear: "linear";
            radial: "radial";
        }>;
        colors: z.ZodArray<z.ZodString>;
        stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
        angle: z.ZodOptional<z.ZodNumber>;
        position: z.ZodOptional<z.ZodString>;
        shape: z.ZodOptional<z.ZodEnum<{
            ellipse: "ellipse";
            circle: "circle";
        }>>;
    }, z.core.$strip>]>;
    target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
        wrapper: "wrapper";
        element: "element";
    }>>>;
    radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
}, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
    type: z.ZodEnum<{
        linear: "linear";
        radial: "radial";
    }>;
    colors: z.ZodArray<z.ZodString>;
    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
    angle: z.ZodOptional<z.ZodNumber>;
    position: z.ZodOptional<z.ZodString>;
    shape: z.ZodOptional<z.ZodEnum<{
        ellipse: "ellipse";
        circle: "circle";
    }>>;
}, z.core.$strip>]>]>, z.ZodTransform<{
    enabled: boolean;
    color: string | {
        type: "linear" | "radial";
        colors: string[];
        stops?: number[] | undefined;
        angle?: number | undefined;
        position?: string | undefined;
        shape?: "ellipse" | "circle" | undefined;
    };
    target?: "wrapper" | "element" | undefined;
    radius?: number | undefined;
} | {
    enabled: boolean;
    color: string | {
        type: "linear" | "radial";
        colors: string[];
        stops?: number[] | undefined;
        angle?: number | undefined;
        position?: string | undefined;
        shape?: "ellipse" | "circle" | undefined;
    };
    target: string;
    radius: number;
}, string | {
    type: "linear" | "radial";
    colors: string[];
    stops?: number[] | undefined;
    angle?: number | undefined;
    position?: string | undefined;
    shape?: "ellipse" | "circle" | undefined;
} | {
    enabled: boolean;
    color: string | {
        type: "linear" | "radial";
        colors: string[];
        stops?: number[] | undefined;
        angle?: number | undefined;
        position?: string | undefined;
        shape?: "ellipse" | "circle" | undefined;
    };
    target?: "wrapper" | "element" | undefined;
    radius?: number | undefined;
}>>;
/**
 * General appearance schema for all components
 */
export declare const AppearanceShape: z.ZodObject<{
    x: z.ZodNumber;
    y: z.ZodNumber;
    width: z.ZodNumber;
    height: z.ZodNumber;
    offsetX: z.ZodOptional<z.ZodNumber>;
    offsetY: z.ZodOptional<z.ZodNumber>;
    opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodBoolean>;
        color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>;
        target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
            wrapper: "wrapper";
            element: "element";
        }>>>;
        radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
        type: z.ZodEnum<{
            linear: "linear";
            radial: "radial";
        }>;
        colors: z.ZodArray<z.ZodString>;
        stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
        angle: z.ZodOptional<z.ZodNumber>;
        position: z.ZodOptional<z.ZodString>;
        shape: z.ZodOptional<z.ZodEnum<{
            ellipse: "ellipse";
            circle: "circle";
        }>>;
    }, z.core.$strip>]>]>, z.ZodTransform<{
        enabled: boolean;
        color: string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        };
        target?: "wrapper" | "element" | undefined;
        radius?: number | undefined;
    } | {
        enabled: boolean;
        color: string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        };
        target: string;
        radius: number;
    }, string | {
        type: "linear" | "radial";
        colors: string[];
        stops?: number[] | undefined;
        angle?: number | undefined;
        position?: string | undefined;
        shape?: "ellipse" | "circle" | undefined;
    } | {
        enabled: boolean;
        color: string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        };
        target?: "wrapper" | "element" | undefined;
        radius?: number | undefined;
    }>>>>>;
    text: z.ZodOptional<z.ZodObject<{
        fontFamily: z.ZodString;
        fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
            value: number;
            unit: "px";
        }, number>>, z.ZodObject<{
            value: z.ZodNumber;
            unit: z.ZodPrefault<z.ZodEnum<{
                px: "px";
                em: "em";
                rem: "rem";
                "%": "%";
            }>>;
        }, z.core.$strip>]>;
        fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
            normal: "normal";
            bold: "bold";
            bolder: "bolder";
            lighter: "lighter";
            100: "100";
            200: "200";
            300: "300";
            400: "400";
            500: "500";
            600: "600";
            700: "700";
            800: "800";
            900: "900";
        }>>>;
        fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            source: z.ZodEnum<{
                custom: "custom";
                google: "google";
            }>;
            family: z.ZodOptional<z.ZodString>;
            category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
            variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
            fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, z.core.$strip>>>;
        lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
            value: number;
            unit: "em";
        }, number>>, z.ZodObject<{
            value: z.ZodNumber;
            unit: z.ZodPrefault<z.ZodEnum<{
                px: "px";
                em: "em";
                rem: "rem";
                "%": "%";
            }>>;
        }, z.core.$strip>]>>>;
        letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
            value: number;
            unit: "em";
        }, number>>, z.ZodObject<{
            value: z.ZodNumber;
            unit: z.ZodPrefault<z.ZodEnum<{
                px: "px";
                em: "em";
                rem: "rem";
                "%": "%";
            }>>;
        }, z.core.$strip>]>>>;
        color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>;
        textAlign: z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
            justify: "justify";
        }>;
        textTransform: z.ZodOptional<z.ZodEnum<{
            none: "none";
            uppercase: "uppercase";
            lowercase: "lowercase";
            capitalize: "capitalize";
        }>>;
        shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
        }, z.core.$strip>>>;
        outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
        }, z.core.$strip>>>;
        activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            enabled: z.ZodBoolean;
            color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>;
            backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>;
            fontWeight: z.ZodOptional<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>;
            scale: z.ZodOptional<z.ZodNumber>;
            backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
            backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
            backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
        }, z.core.$strip>>>;
        activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            enabled: z.ZodBoolean;
            color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>;
            backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>;
            fontWeight: z.ZodOptional<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>;
            scale: z.ZodOptional<z.ZodNumber>;
            backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
            backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
            backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
        }, z.core.$strip>>>;
        highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>>>;
    }, z.core.$strip>>;
    verticalAlign: z.ZodOptional<z.ZodEnum<{
        center: "center";
        top: "top";
        bottom: "bottom";
    }>>;
    horizontalAlign: z.ZodOptional<z.ZodEnum<{
        center: "center";
        left: "left";
        right: "right";
    }>>;
    backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
}, z.core.$strip>;
/**
 * AI Emoji shape for subtitle components
 */
export declare const AIEmojiShape: z.ZodObject<{
    text: z.ZodString;
    emoji: z.ZodString;
    startAt: z.ZodNumber;
    endAt: z.ZodNumber;
    componentId: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
/**
 * Timeline structure for components
 */
export declare const ComponentTimelineShape: z.ZodObject<{
    startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
}, z.core.$strip>;
/**
 * Animation structure
 */
export declare const AnimationShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    startAt: z.ZodOptional<z.ZodNumber>;
    animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
        id: z.ZodString;
        presetId: z.ZodOptional<z.ZodString>;
        version: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        duration: z.ZodOptional<z.ZodNumber>;
        data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
            type: z.ZodLiteral<"style">;
            properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                fromData: z.ZodString;
                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                    cycle: "cycle";
                    useFallback: "useFallback";
                    clamp: "clamp";
                }>>>;
                fallbackValue: z.ZodOptional<z.ZodAny>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"byIndex">;
                expression: z.ZodString;
                fallbackValue: z.ZodOptional<z.ZodAny>;
            }, z.core.$strip>]>>>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"splitText">;
            by: z.ZodEnum<{
                words: "words";
                lines: "lines";
                chars: "chars";
            }>;
        }, z.core.$strip>], "type">>>>;
        revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        timeline: z.ZodArray<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            target: z.ZodOptional<z.ZodString>;
            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                anchor: z.ZodString;
                anchorPoint: z.ZodOptional<z.ZodEnum<{
                    start: "start";
                    end: "end";
                }>>;
                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                    start: "start";
                    end: "end";
                    center: "center";
                }>>>;
                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>]>>;
            tweens: z.ZodArray<z.ZodObject<{
                method: z.ZodEnum<{
                    set: "set";
                    to: "to";
                    from: "from";
                    fromTo: "fromTo";
                }>;
                position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                    anchor: z.ZodString;
                    anchorPoint: z.ZodOptional<z.ZodEnum<{
                        start: "start";
                        end: "end";
                    }>>;
                    alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                        start: "start";
                        end: "end";
                        center: "center";
                    }>>>;
                    offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                }, z.core.$strip>]>>;
                vars: z.ZodObject<{
                    from: z.ZodOptional<z.ZodObject<{
                        opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>>;
                    duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>;
                    ease: z.ZodOptional<z.ZodString>;
                    delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>;
                    stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                        type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                        dataKey: z.ZodOptional<z.ZodString>;
                        referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                        each: z.ZodOptional<z.ZodNumber>;
                        from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                        grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                        axis: z.ZodOptional<z.ZodEnum<{
                            x: "x";
                            y: "y";
                        }>>;
                        ease: z.ZodOptional<z.ZodString>;
                        amount: z.ZodOptional<z.ZodNumber>;
                    }, z.core.$strip>]>>;
                }, z.core.$catchall<z.ZodAny>>;
            }, z.core.$strip>>;
        }, z.core.$strip>>;
    }, z.core.$strip>, z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        tween: z.ZodObject<{
            method: z.ZodEnum<{
                set: "set";
                to: "to";
                from: "from";
                fromTo: "fromTo";
            }>;
            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                anchor: z.ZodString;
                anchorPoint: z.ZodOptional<z.ZodEnum<{
                    start: "start";
                    end: "end";
                }>>;
                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                    start: "start";
                    end: "end";
                    center: "center";
                }>>>;
                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>]>>;
            vars: z.ZodObject<{
                from: z.ZodOptional<z.ZodObject<{
                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>;
                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>;
                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>;
                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>;
                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>;
                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>;
                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>;
                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>;
                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>;
                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>;
                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                    fromData: z.ZodString;
                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                        cycle: "cycle";
                        useFallback: "useFallback";
                        clamp: "clamp";
                    }>>>;
                    fallbackValue: z.ZodOptional<z.ZodAny>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"byIndex">;
                    expression: z.ZodString;
                    fallbackValue: z.ZodOptional<z.ZodAny>;
                }, z.core.$strip>]>>>>;
                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                    fromData: z.ZodString;
                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                        cycle: "cycle";
                        useFallback: "useFallback";
                        clamp: "clamp";
                    }>>>;
                    fallbackValue: z.ZodOptional<z.ZodAny>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"byIndex">;
                    expression: z.ZodString;
                    fallbackValue: z.ZodOptional<z.ZodAny>;
                }, z.core.$strip>]>>;
                ease: z.ZodOptional<z.ZodString>;
                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                    fromData: z.ZodString;
                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                        cycle: "cycle";
                        useFallback: "useFallback";
                        clamp: "clamp";
                    }>>>;
                    fallbackValue: z.ZodOptional<z.ZodAny>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"byIndex">;
                    expression: z.ZodString;
                    fallbackValue: z.ZodOptional<z.ZodAny>;
                }, z.core.$strip>]>>;
                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                    dataKey: z.ZodOptional<z.ZodString>;
                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                    each: z.ZodOptional<z.ZodNumber>;
                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                    axis: z.ZodOptional<z.ZodEnum<{
                        x: "x";
                        y: "y";
                    }>>;
                    ease: z.ZodOptional<z.ZodString>;
                    amount: z.ZodOptional<z.ZodNumber>;
                }, z.core.$strip>]>>;
            }, z.core.$catchall<z.ZodAny>>;
        }, z.core.$strip>;
        target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
    }, z.core.$strip>]>;
    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
}, z.core.$strip>;
/**
 * Source metadata for media components
 */
export declare const SourceMetadataShape: z.ZodObject<{
    width: z.ZodOptional<z.ZodNumber>;
    height: z.ZodOptional<z.ZodNumber>;
    duration: z.ZodOptional<z.ZodNumber>;
    format: z.ZodOptional<z.ZodString>;
    codec: z.ZodOptional<z.ZodString>;
    bitrate: z.ZodOptional<z.ZodNumber>;
    fps: z.ZodOptional<z.ZodNumber>;
    hasAudio: z.ZodOptional<z.ZodBoolean>;
}, z.core.$strip>;
/**
 * Component source definition
 */
export declare const ComponentSourceShape: z.ZodObject<{
    url: z.ZodOptional<z.ZodURL>;
    streamUrl: z.ZodOptional<z.ZodURL>;
    assetId: z.ZodOptional<z.ZodString>;
    languageCode: z.ZodOptional<z.ZodString>;
    startAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
    endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
    metadata: z.ZodOptional<z.ZodObject<{
        width: z.ZodOptional<z.ZodNumber>;
        height: z.ZodOptional<z.ZodNumber>;
        duration: z.ZodOptional<z.ZodNumber>;
        format: z.ZodOptional<z.ZodString>;
        codec: z.ZodOptional<z.ZodString>;
        bitrate: z.ZodOptional<z.ZodNumber>;
        fps: z.ZodOptional<z.ZodNumber>;
        hasAudio: z.ZodOptional<z.ZodBoolean>;
    }, z.core.$strip>>;
    transcriptFormat: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
/**
 * Timing anchor for components that need synchronization (like subtitles)
 */
export declare const TimingAnchorShape: z.ZodObject<{
    mode: z.ZodEnum<{
        ASSET_USAGE: "ASSET_USAGE";
        COMPONENT: "COMPONENT";
    }>;
    assetId: z.ZodOptional<z.ZodString>;
    layerId: z.ZodOptional<z.ZodString>;
    componentId: z.ZodOptional<z.ZodString>;
    offset: z.ZodPrefault<z.ZodNumber>;
}, z.core.$strip>;
/**
 * Layout split effect schema
 */
export declare const LayoutSplitEffectShape: z.ZodObject<{
    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    intensity: z.ZodPrefault<z.ZodNumber>;
    blendMode: z.ZodPrefault<z.ZodEnum<{
        color: "color";
        normal: "normal";
        multiply: "multiply";
        screen: "screen";
        overlay: "overlay";
        darken: "darken";
        lighten: "lighten";
        "color-dodge": "color-dodge";
        "color-burn": "color-burn";
        "hard-light": "hard-light";
        "soft-light": "soft-light";
        difference: "difference";
        exclusion: "exclusion";
        hue: "hue";
        saturation: "saturation";
        luminosity: "luminosity";
    }>>;
    type: z.ZodLiteral<"layoutSplit">;
    pieces: z.ZodOptional<z.ZodInt>;
    sceneWidth: z.ZodOptional<z.ZodNumber>;
    sceneHeight: z.ZodOptional<z.ZodNumber>;
    chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, z.core.$strip>;
/**
 * Rotation randomizer effect schema
 */
export declare const RotationRandomizerEffectShape: z.ZodObject<{
    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    intensity: z.ZodPrefault<z.ZodNumber>;
    blendMode: z.ZodPrefault<z.ZodEnum<{
        color: "color";
        normal: "normal";
        multiply: "multiply";
        screen: "screen";
        overlay: "overlay";
        darken: "darken";
        lighten: "lighten";
        "color-dodge": "color-dodge";
        "color-burn": "color-burn";
        "hard-light": "hard-light";
        "soft-light": "soft-light";
        difference: "difference";
        exclusion: "exclusion";
        hue: "hue";
        saturation: "saturation";
        luminosity: "luminosity";
    }>>;
    type: z.ZodLiteral<"rotationRandomizer">;
    maxRotation: z.ZodPrefault<z.ZodNumber>;
    animate: z.ZodPrefault<z.ZodBoolean>;
    seed: z.ZodOptional<z.ZodInt>;
}, z.core.$strip>;
export declare const FillBackgroundBlurEffectShape: z.ZodObject<{
    type: z.ZodLiteral<"fillBackgroundBlur">;
    enabled: z.ZodPrefault<z.ZodBoolean>;
    blurAmount: z.ZodPrefault<z.ZodNumber>;
}, z.core.$strip>;
/**
 * Text Shadow effect schema
 */
export declare const TextShadowEffectShape: z.ZodObject<{
    intensity: z.ZodPrefault<z.ZodNumber>;
    blendMode: z.ZodPrefault<z.ZodEnum<{
        color: "color";
        normal: "normal";
        multiply: "multiply";
        screen: "screen";
        overlay: "overlay";
        darken: "darken";
        lighten: "lighten";
        "color-dodge": "color-dodge";
        "color-burn": "color-burn";
        "hard-light": "hard-light";
        "soft-light": "soft-light";
        difference: "difference";
        exclusion: "exclusion";
        hue: "hue";
        saturation: "saturation";
        luminosity: "luminosity";
    }>>;
    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    preset: z.ZodOptional<z.ZodString>;
    color: z.ZodOptional<z.ZodString>;
    blur: z.ZodOptional<z.ZodNumber>;
    size: z.ZodOptional<z.ZodNumber>;
    offsetX: z.ZodOptional<z.ZodNumber>;
    offsetY: z.ZodOptional<z.ZodNumber>;
    opacity: z.ZodOptional<z.ZodNumber>;
    type: z.ZodLiteral<"textShadow">;
}, z.core.$strip>;
/**
 * Text Outline effect schema
 */
export declare const TextOutlineEffectShape: z.ZodObject<{
    intensity: z.ZodPrefault<z.ZodNumber>;
    blendMode: z.ZodPrefault<z.ZodEnum<{
        color: "color";
        normal: "normal";
        multiply: "multiply";
        screen: "screen";
        overlay: "overlay";
        darken: "darken";
        lighten: "lighten";
        "color-dodge": "color-dodge";
        "color-burn": "color-burn";
        "hard-light": "hard-light";
        "soft-light": "soft-light";
        difference: "difference";
        exclusion: "exclusion";
        hue: "hue";
        saturation: "saturation";
        luminosity: "luminosity";
    }>>;
    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    preset: z.ZodOptional<z.ZodString>;
    color: z.ZodString;
    size: z.ZodOptional<z.ZodNumber>;
    opacity: z.ZodOptional<z.ZodNumber>;
    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
        solid: "solid";
        dashed: "dashed";
        dotted: "dotted";
    }>>>;
    dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
    type: z.ZodLiteral<"textOutline">;
}, z.core.$strip>;
/**
 * Union of all effect types for components
 */
export declare const ComponentEffectShape: z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    intensity: z.ZodPrefault<z.ZodNumber>;
    blendMode: z.ZodPrefault<z.ZodEnum<{
        color: "color";
        normal: "normal";
        multiply: "multiply";
        screen: "screen";
        overlay: "overlay";
        darken: "darken";
        lighten: "lighten";
        "color-dodge": "color-dodge";
        "color-burn": "color-burn";
        "hard-light": "hard-light";
        "soft-light": "soft-light";
        difference: "difference";
        exclusion: "exclusion";
        hue: "hue";
        saturation: "saturation";
        luminosity: "luminosity";
    }>>;
    type: z.ZodLiteral<"blur">;
    radius: z.ZodPrefault<z.ZodNumber>;
}, z.core.$strip>, z.ZodObject<{
    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    intensity: z.ZodPrefault<z.ZodNumber>;
    blendMode: z.ZodPrefault<z.ZodEnum<{
        color: "color";
        normal: "normal";
        multiply: "multiply";
        screen: "screen";
        overlay: "overlay";
        darken: "darken";
        lighten: "lighten";
        "color-dodge": "color-dodge";
        "color-burn": "color-burn";
        "hard-light": "hard-light";
        "soft-light": "soft-light";
        difference: "difference";
        exclusion: "exclusion";
        hue: "hue";
        saturation: "saturation";
        luminosity: "luminosity";
    }>>;
    type: z.ZodLiteral<"colorAdjustment">;
    brightness: z.ZodPrefault<z.ZodNumber>;
    contrast: z.ZodPrefault<z.ZodNumber>;
    saturation: z.ZodPrefault<z.ZodNumber>;
    hue: z.ZodPrefault<z.ZodNumber>;
}, z.core.$strip>], "type">, z.ZodObject<{
    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    intensity: z.ZodPrefault<z.ZodNumber>;
    blendMode: z.ZodPrefault<z.ZodEnum<{
        color: "color";
        normal: "normal";
        multiply: "multiply";
        screen: "screen";
        overlay: "overlay";
        darken: "darken";
        lighten: "lighten";
        "color-dodge": "color-dodge";
        "color-burn": "color-burn";
        "hard-light": "hard-light";
        "soft-light": "soft-light";
        difference: "difference";
        exclusion: "exclusion";
        hue: "hue";
        saturation: "saturation";
        luminosity: "luminosity";
    }>>;
    type: z.ZodLiteral<"layoutSplit">;
    pieces: z.ZodOptional<z.ZodInt>;
    sceneWidth: z.ZodOptional<z.ZodNumber>;
    sceneHeight: z.ZodOptional<z.ZodNumber>;
    chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, z.core.$strip>, z.ZodObject<{
    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    intensity: z.ZodPrefault<z.ZodNumber>;
    blendMode: z.ZodPrefault<z.ZodEnum<{
        color: "color";
        normal: "normal";
        multiply: "multiply";
        screen: "screen";
        overlay: "overlay";
        darken: "darken";
        lighten: "lighten";
        "color-dodge": "color-dodge";
        "color-burn": "color-burn";
        "hard-light": "hard-light";
        "soft-light": "soft-light";
        difference: "difference";
        exclusion: "exclusion";
        hue: "hue";
        saturation: "saturation";
        luminosity: "luminosity";
    }>>;
    type: z.ZodLiteral<"rotationRandomizer">;
    maxRotation: z.ZodPrefault<z.ZodNumber>;
    animate: z.ZodPrefault<z.ZodBoolean>;
    seed: z.ZodOptional<z.ZodInt>;
}, z.core.$strip>, z.ZodObject<{
    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    intensity: z.ZodPrefault<z.ZodNumber>;
    blendMode: z.ZodPrefault<z.ZodEnum<{
        color: "color";
        normal: "normal";
        multiply: "multiply";
        screen: "screen";
        overlay: "overlay";
        darken: "darken";
        lighten: "lighten";
        "color-dodge": "color-dodge";
        "color-burn": "color-burn";
        "hard-light": "hard-light";
        "soft-light": "soft-light";
        difference: "difference";
        exclusion: "exclusion";
        hue: "hue";
        saturation: "saturation";
        luminosity: "luminosity";
    }>>;
    type: z.ZodLiteral<"blur">;
    radius: z.ZodPrefault<z.ZodNumber>;
}, z.core.$strip>, z.ZodObject<{
    type: z.ZodLiteral<"fillBackgroundBlur">;
    enabled: z.ZodPrefault<z.ZodBoolean>;
    blurAmount: z.ZodPrefault<z.ZodNumber>;
}, z.core.$strip>, z.ZodObject<{
    intensity: z.ZodPrefault<z.ZodNumber>;
    blendMode: z.ZodPrefault<z.ZodEnum<{
        color: "color";
        normal: "normal";
        multiply: "multiply";
        screen: "screen";
        overlay: "overlay";
        darken: "darken";
        lighten: "lighten";
        "color-dodge": "color-dodge";
        "color-burn": "color-burn";
        "hard-light": "hard-light";
        "soft-light": "soft-light";
        difference: "difference";
        exclusion: "exclusion";
        hue: "hue";
        saturation: "saturation";
        luminosity: "luminosity";
    }>>;
    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    preset: z.ZodOptional<z.ZodString>;
    color: z.ZodOptional<z.ZodString>;
    blur: z.ZodOptional<z.ZodNumber>;
    size: z.ZodOptional<z.ZodNumber>;
    offsetX: z.ZodOptional<z.ZodNumber>;
    offsetY: z.ZodOptional<z.ZodNumber>;
    opacity: z.ZodOptional<z.ZodNumber>;
    type: z.ZodLiteral<"textShadow">;
}, z.core.$strip>, z.ZodObject<{
    intensity: z.ZodPrefault<z.ZodNumber>;
    blendMode: z.ZodPrefault<z.ZodEnum<{
        color: "color";
        normal: "normal";
        multiply: "multiply";
        screen: "screen";
        overlay: "overlay";
        darken: "darken";
        lighten: "lighten";
        "color-dodge": "color-dodge";
        "color-burn": "color-burn";
        "hard-light": "hard-light";
        "soft-light": "soft-light";
        difference: "difference";
        exclusion: "exclusion";
        hue: "hue";
        saturation: "saturation";
        luminosity: "luminosity";
    }>>;
    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    preset: z.ZodOptional<z.ZodString>;
    color: z.ZodString;
    size: z.ZodOptional<z.ZodNumber>;
    opacity: z.ZodOptional<z.ZodNumber>;
    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
        solid: "solid";
        dashed: "dashed";
        dotted: "dotted";
    }>>>;
    dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
    type: z.ZodLiteral<"textOutline">;
}, z.core.$strip>]>;
/**
 * Base component schema that all component types will extend
 * @deprecated Use ComponentBaseWithoutAppearanceShape and add appearance per component
 */
export declare const ComponentBaseShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    type: z.ZodEnum<{
        IMAGE: "IMAGE";
        GIF: "GIF";
        VIDEO: "VIDEO";
        TEXT: "TEXT";
        SHAPE: "SHAPE";
        AUDIO: "AUDIO";
        COLOR: "COLOR";
        GRADIENT: "GRADIENT";
        SUBTITLES: "SUBTITLES";
    }>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    }, z.core.$strip>;
}, z.core.$strip>;
/**
 * Text component schema
 */
export declare const TextComponentShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"TEXT">;
    text: z.ZodString;
    isAIEmoji: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        text: z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
    }, z.core.$strip>;
}, z.core.$strict>;
/**
 * Image component schema
 */
export declare const ImageComponentShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"IMAGE">;
    source: z.ZodObject<{
        url: z.ZodOptional<z.ZodURL>;
        streamUrl: z.ZodOptional<z.ZodURL>;
        assetId: z.ZodOptional<z.ZodString>;
        languageCode: z.ZodOptional<z.ZodString>;
        startAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        metadata: z.ZodOptional<z.ZodObject<{
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
            format: z.ZodOptional<z.ZodString>;
            codec: z.ZodOptional<z.ZodString>;
            bitrate: z.ZodOptional<z.ZodNumber>;
            fps: z.ZodOptional<z.ZodNumber>;
            hasAudio: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>>;
        transcriptFormat: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    }, z.core.$strip>;
    crop: z.ZodOptional<z.ZodObject<{
        xPercent: z.ZodPrefault<z.ZodNumber>;
        yPercent: z.ZodPrefault<z.ZodNumber>;
        widthPercent: z.ZodPrefault<z.ZodNumber>;
        heightPercent: z.ZodPrefault<z.ZodNumber>;
    }, z.core.$strip>>;
}, z.core.$strict>;
/**
 * GIF component schema
 */
export declare const GifComponentShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"GIF">;
    source: z.ZodObject<{
        url: z.ZodOptional<z.ZodURL>;
        streamUrl: z.ZodOptional<z.ZodURL>;
        assetId: z.ZodOptional<z.ZodString>;
        languageCode: z.ZodOptional<z.ZodString>;
        startAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        metadata: z.ZodOptional<z.ZodObject<{
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
            format: z.ZodOptional<z.ZodString>;
            codec: z.ZodOptional<z.ZodString>;
            bitrate: z.ZodOptional<z.ZodNumber>;
            fps: z.ZodOptional<z.ZodNumber>;
            hasAudio: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>>;
        transcriptFormat: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    }, z.core.$strip>;
    playback: z.ZodOptional<z.ZodObject<{
        loop: z.ZodPrefault<z.ZodBoolean>;
        speed: z.ZodPrefault<z.ZodNumber>;
    }, z.core.$strip>>;
}, z.core.$strict>;
/**
 * Video component schema
 */
export declare const VideoComponentShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"VIDEO">;
    source: z.ZodObject<{
        url: z.ZodOptional<z.ZodURL>;
        streamUrl: z.ZodOptional<z.ZodURL>;
        assetId: z.ZodOptional<z.ZodString>;
        languageCode: z.ZodOptional<z.ZodString>;
        startAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        metadata: z.ZodOptional<z.ZodObject<{
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
            format: z.ZodOptional<z.ZodString>;
            codec: z.ZodOptional<z.ZodString>;
            bitrate: z.ZodOptional<z.ZodNumber>;
            fps: z.ZodOptional<z.ZodNumber>;
            hasAudio: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>>;
        transcriptFormat: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    }, z.core.$strip>;
    volume: z.ZodPrefault<z.ZodNumber>;
    muted: z.ZodPrefault<z.ZodBoolean>;
    playback: z.ZodOptional<z.ZodObject<{
        autoplay: z.ZodPrefault<z.ZodBoolean>;
        loop: z.ZodPrefault<z.ZodBoolean>;
        playbackRate: z.ZodPrefault<z.ZodNumber>;
        startAt: z.ZodPrefault<z.ZodNumber>;
        endAt: z.ZodOptional<z.ZodNumber>;
    }, z.core.$strip>>;
    crop: z.ZodOptional<z.ZodObject<{
        x: z.ZodPrefault<z.ZodNumber>;
        y: z.ZodPrefault<z.ZodNumber>;
        width: z.ZodPrefault<z.ZodNumber>;
        height: z.ZodPrefault<z.ZodNumber>;
    }, z.core.$strip>>;
}, z.core.$strict>;
/**
 * Progress configuration schemas for different progress types
 */
export declare const LinearProgressConfigShape: z.ZodObject<{
    type: z.ZodLiteral<"linear">;
    direction: z.ZodPrefault<z.ZodEnum<{
        horizontal: "horizontal";
        vertical: "vertical";
    }>>;
    reverse: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    anchor: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
        start: "start";
        end: "end";
        center: "center";
    }>>>;
}, z.core.$strip>;
export declare const PerimeterProgressConfigShape: z.ZodObject<{
    type: z.ZodLiteral<"perimeter">;
    startCorner: z.ZodPrefault<z.ZodEnum<{
        "top-left": "top-left";
        "top-right": "top-right";
        "bottom-right": "bottom-right";
        "bottom-left": "bottom-left";
    }>>;
    clockwise: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    strokeWidth: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
}, z.core.$strip>;
export declare const RadialProgressConfigShape: z.ZodObject<{
    type: z.ZodLiteral<"radial">;
    startAngle: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    clockwise: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    innerRadius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    strokeWidth: z.ZodOptional<z.ZodNumber>;
    capStyle: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
        butt: "butt";
        round: "round";
        square: "square";
    }>>>;
}, z.core.$strip>;
export declare const DoubleProgressConfigShape: z.ZodObject<{
    type: z.ZodLiteral<"double">;
    paths: z.ZodArray<z.ZodObject<{
        direction: z.ZodEnum<{
            horizontal: "horizontal";
            vertical: "vertical";
        }>;
        position: z.ZodEnum<{
            left: "left";
            right: "right";
            top: "top";
            bottom: "bottom";
        }>;
        reverse: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        offset: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    }, z.core.$strip>>;
}, z.core.$strip>;
export declare const CustomProgressConfigShape: z.ZodObject<{
    type: z.ZodLiteral<"custom">;
    pathData: z.ZodString;
    strokeWidth: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    capStyle: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
        butt: "butt";
        round: "round";
        square: "square";
    }>>>;
}, z.core.$strip>;
/**
 * Union of all progress configuration types
 */
export declare const ProgressConfigShape: z.ZodDiscriminatedUnion<[z.ZodObject<{
    type: z.ZodLiteral<"linear">;
    direction: z.ZodPrefault<z.ZodEnum<{
        horizontal: "horizontal";
        vertical: "vertical";
    }>>;
    reverse: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    anchor: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
        start: "start";
        end: "end";
        center: "center";
    }>>>;
}, z.core.$strip>, z.ZodObject<{
    type: z.ZodLiteral<"perimeter">;
    startCorner: z.ZodPrefault<z.ZodEnum<{
        "top-left": "top-left";
        "top-right": "top-right";
        "bottom-right": "bottom-right";
        "bottom-left": "bottom-left";
    }>>;
    clockwise: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    strokeWidth: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
}, z.core.$strip>, z.ZodObject<{
    type: z.ZodLiteral<"radial">;
    startAngle: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    clockwise: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    innerRadius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    strokeWidth: z.ZodOptional<z.ZodNumber>;
    capStyle: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
        butt: "butt";
        round: "round";
        square: "square";
    }>>>;
}, z.core.$strip>, z.ZodObject<{
    type: z.ZodLiteral<"double">;
    paths: z.ZodArray<z.ZodObject<{
        direction: z.ZodEnum<{
            horizontal: "horizontal";
            vertical: "vertical";
        }>;
        position: z.ZodEnum<{
            left: "left";
            right: "right";
            top: "top";
            bottom: "bottom";
        }>;
        reverse: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        offset: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    }, z.core.$strip>>;
}, z.core.$strip>, z.ZodObject<{
    type: z.ZodLiteral<"custom">;
    pathData: z.ZodString;
    strokeWidth: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    capStyle: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
        butt: "butt";
        round: "round";
        square: "square";
    }>>>;
}, z.core.$strip>], "type">;
/**
 * Shape component schema for basic geometric shapes
 */
export declare const ShapeComponentShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"SHAPE">;
    shape: z.ZodUnion<readonly [z.ZodObject<{
        type: z.ZodLiteral<"progress">;
        progressConfig: z.ZodPrefault<z.ZodOptional<z.ZodDiscriminatedUnion<[z.ZodObject<{
            type: z.ZodLiteral<"linear">;
            direction: z.ZodPrefault<z.ZodEnum<{
                horizontal: "horizontal";
                vertical: "vertical";
            }>>;
            reverse: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            anchor: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                start: "start";
                end: "end";
                center: "center";
            }>>>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"perimeter">;
            startCorner: z.ZodPrefault<z.ZodEnum<{
                "top-left": "top-left";
                "top-right": "top-right";
                "bottom-right": "bottom-right";
                "bottom-left": "bottom-left";
            }>>;
            clockwise: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            strokeWidth: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"radial">;
            startAngle: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            clockwise: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            innerRadius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            strokeWidth: z.ZodOptional<z.ZodNumber>;
            capStyle: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                butt: "butt";
                round: "round";
                square: "square";
            }>>>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"double">;
            paths: z.ZodArray<z.ZodObject<{
                direction: z.ZodEnum<{
                    horizontal: "horizontal";
                    vertical: "vertical";
                }>;
                position: z.ZodEnum<{
                    left: "left";
                    right: "right";
                    top: "top";
                    bottom: "bottom";
                }>;
                reverse: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                offset: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            }, z.core.$strip>>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"custom">;
            pathData: z.ZodString;
            strokeWidth: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            capStyle: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                butt: "butt";
                round: "round";
                square: "square";
            }>>>;
        }, z.core.$strip>], "type">>>;
    }, z.core.$strip>, z.ZodObject<{
        type: z.ZodEnum<{
            path: "path";
            ellipse: "ellipse";
            circle: "circle";
            rectangle: "rectangle";
            triangle: "triangle";
            polygon: "polygon";
            star: "star";
        }>;
        points: z.ZodOptional<z.ZodArray<z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, z.core.$strip>>>;
        pathData: z.ZodOptional<z.ZodString>;
        cornerRadius: z.ZodOptional<z.ZodNumber>;
    }, z.core.$strip>]>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
    }, z.core.$strip>;
}, z.core.$strict>;
/**
 * Audio component schema
 */
export declare const AudioComponentShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"AUDIO">;
    source: z.ZodObject<{
        url: z.ZodOptional<z.ZodURL>;
        streamUrl: z.ZodOptional<z.ZodURL>;
        assetId: z.ZodOptional<z.ZodString>;
        languageCode: z.ZodOptional<z.ZodString>;
        startAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        metadata: z.ZodOptional<z.ZodObject<{
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
            format: z.ZodOptional<z.ZodString>;
            codec: z.ZodOptional<z.ZodString>;
            bitrate: z.ZodOptional<z.ZodNumber>;
            fps: z.ZodOptional<z.ZodNumber>;
            hasAudio: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>>;
        transcriptFormat: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    }, z.core.$strip>;
    volume: z.ZodPrefault<z.ZodNumber>;
    muted: z.ZodPrefault<z.ZodBoolean>;
}, z.core.$strict>;
/**
 * Color component schema
 */
export declare const ColorComponentShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"COLOR">;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        background: z.ZodString;
    }, z.core.$strip>;
}, z.core.$strict>;
/**
 * Gradient component schema
 */
export declare const GradientComponentShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"GRADIENT">;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        background: z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>;
    }, z.core.$strip>;
}, z.core.$strict>;
/**
 * Subtitles component schema
 */
export declare const SubtitleComponentShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"SUBTITLES">;
    source: z.ZodOptional<z.ZodObject<{
        streamUrl: z.ZodOptional<z.ZodURL>;
        assetId: z.ZodOptional<z.ZodString>;
        languageCode: z.ZodOptional<z.ZodString>;
        startAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        metadata: z.ZodOptional<z.ZodObject<{
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
            format: z.ZodOptional<z.ZodString>;
            codec: z.ZodOptional<z.ZodString>;
            bitrate: z.ZodOptional<z.ZodNumber>;
            fps: z.ZodOptional<z.ZodNumber>;
            hasAudio: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>>;
        transcriptFormat: z.ZodOptional<z.ZodString>;
        url: z.ZodOptional<z.ZodURL>;
    }, z.core.$strip>>;
    timingAnchor: z.ZodObject<{
        mode: z.ZodEnum<{
            ASSET_USAGE: "ASSET_USAGE";
            COMPONENT: "COMPONENT";
        }>;
        assetId: z.ZodOptional<z.ZodString>;
        layerId: z.ZodOptional<z.ZodString>;
        componentId: z.ZodOptional<z.ZodString>;
        offset: z.ZodPrefault<z.ZodNumber>;
    }, z.core.$strip>;
    text: z.ZodOptional<z.ZodString>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        text: z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        hasAIEmojis: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        aiEmojisPlacement: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
            top: "top";
            bottom: "bottom";
        }>>>;
        aiEmojisPlacementOffset: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        aiEmojis: z.ZodOptional<z.ZodArray<z.ZodObject<{
            text: z.ZodString;
            emoji: z.ZodString;
            startAt: z.ZodNumber;
            endAt: z.ZodNumber;
            componentId: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>>>;
        highlighterColor1: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
        highlighterColor2: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
        highlighterColor3: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
    }, z.core.$strip>;
}, z.core.$strict>;
/**
 * Union of all component types for polymorphic handling
 */
export declare const ComponentShape: z.ZodDiscriminatedUnion<[z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"TEXT">;
    text: z.ZodString;
    isAIEmoji: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        text: z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
    }, z.core.$strip>;
}, z.core.$strict>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"IMAGE">;
    source: z.ZodObject<{
        url: z.ZodOptional<z.ZodURL>;
        streamUrl: z.ZodOptional<z.ZodURL>;
        assetId: z.ZodOptional<z.ZodString>;
        languageCode: z.ZodOptional<z.ZodString>;
        startAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        metadata: z.ZodOptional<z.ZodObject<{
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
            format: z.ZodOptional<z.ZodString>;
            codec: z.ZodOptional<z.ZodString>;
            bitrate: z.ZodOptional<z.ZodNumber>;
            fps: z.ZodOptional<z.ZodNumber>;
            hasAudio: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>>;
        transcriptFormat: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    }, z.core.$strip>;
    crop: z.ZodOptional<z.ZodObject<{
        xPercent: z.ZodPrefault<z.ZodNumber>;
        yPercent: z.ZodPrefault<z.ZodNumber>;
        widthPercent: z.ZodPrefault<z.ZodNumber>;
        heightPercent: z.ZodPrefault<z.ZodNumber>;
    }, z.core.$strip>>;
}, z.core.$strict>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"GIF">;
    source: z.ZodObject<{
        url: z.ZodOptional<z.ZodURL>;
        streamUrl: z.ZodOptional<z.ZodURL>;
        assetId: z.ZodOptional<z.ZodString>;
        languageCode: z.ZodOptional<z.ZodString>;
        startAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        metadata: z.ZodOptional<z.ZodObject<{
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
            format: z.ZodOptional<z.ZodString>;
            codec: z.ZodOptional<z.ZodString>;
            bitrate: z.ZodOptional<z.ZodNumber>;
            fps: z.ZodOptional<z.ZodNumber>;
            hasAudio: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>>;
        transcriptFormat: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    }, z.core.$strip>;
    playback: z.ZodOptional<z.ZodObject<{
        loop: z.ZodPrefault<z.ZodBoolean>;
        speed: z.ZodPrefault<z.ZodNumber>;
    }, z.core.$strip>>;
}, z.core.$strict>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"VIDEO">;
    source: z.ZodObject<{
        url: z.ZodOptional<z.ZodURL>;
        streamUrl: z.ZodOptional<z.ZodURL>;
        assetId: z.ZodOptional<z.ZodString>;
        languageCode: z.ZodOptional<z.ZodString>;
        startAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        metadata: z.ZodOptional<z.ZodObject<{
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
            format: z.ZodOptional<z.ZodString>;
            codec: z.ZodOptional<z.ZodString>;
            bitrate: z.ZodOptional<z.ZodNumber>;
            fps: z.ZodOptional<z.ZodNumber>;
            hasAudio: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>>;
        transcriptFormat: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    }, z.core.$strip>;
    volume: z.ZodPrefault<z.ZodNumber>;
    muted: z.ZodPrefault<z.ZodBoolean>;
    playback: z.ZodOptional<z.ZodObject<{
        autoplay: z.ZodPrefault<z.ZodBoolean>;
        loop: z.ZodPrefault<z.ZodBoolean>;
        playbackRate: z.ZodPrefault<z.ZodNumber>;
        startAt: z.ZodPrefault<z.ZodNumber>;
        endAt: z.ZodOptional<z.ZodNumber>;
    }, z.core.$strip>>;
    crop: z.ZodOptional<z.ZodObject<{
        x: z.ZodPrefault<z.ZodNumber>;
        y: z.ZodPrefault<z.ZodNumber>;
        width: z.ZodPrefault<z.ZodNumber>;
        height: z.ZodPrefault<z.ZodNumber>;
    }, z.core.$strip>>;
}, z.core.$strict>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"SHAPE">;
    shape: z.ZodUnion<readonly [z.ZodObject<{
        type: z.ZodLiteral<"progress">;
        progressConfig: z.ZodPrefault<z.ZodOptional<z.ZodDiscriminatedUnion<[z.ZodObject<{
            type: z.ZodLiteral<"linear">;
            direction: z.ZodPrefault<z.ZodEnum<{
                horizontal: "horizontal";
                vertical: "vertical";
            }>>;
            reverse: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            anchor: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                start: "start";
                end: "end";
                center: "center";
            }>>>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"perimeter">;
            startCorner: z.ZodPrefault<z.ZodEnum<{
                "top-left": "top-left";
                "top-right": "top-right";
                "bottom-right": "bottom-right";
                "bottom-left": "bottom-left";
            }>>;
            clockwise: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            strokeWidth: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"radial">;
            startAngle: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            clockwise: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            innerRadius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            strokeWidth: z.ZodOptional<z.ZodNumber>;
            capStyle: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                butt: "butt";
                round: "round";
                square: "square";
            }>>>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"double">;
            paths: z.ZodArray<z.ZodObject<{
                direction: z.ZodEnum<{
                    horizontal: "horizontal";
                    vertical: "vertical";
                }>;
                position: z.ZodEnum<{
                    left: "left";
                    right: "right";
                    top: "top";
                    bottom: "bottom";
                }>;
                reverse: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                offset: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            }, z.core.$strip>>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"custom">;
            pathData: z.ZodString;
            strokeWidth: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            capStyle: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                butt: "butt";
                round: "round";
                square: "square";
            }>>>;
        }, z.core.$strip>], "type">>>;
    }, z.core.$strip>, z.ZodObject<{
        type: z.ZodEnum<{
            path: "path";
            ellipse: "ellipse";
            circle: "circle";
            rectangle: "rectangle";
            triangle: "triangle";
            polygon: "polygon";
            star: "star";
        }>;
        points: z.ZodOptional<z.ZodArray<z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, z.core.$strip>>>;
        pathData: z.ZodOptional<z.ZodString>;
        cornerRadius: z.ZodOptional<z.ZodNumber>;
    }, z.core.$strip>]>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
    }, z.core.$strip>;
}, z.core.$strict>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"AUDIO">;
    source: z.ZodObject<{
        url: z.ZodOptional<z.ZodURL>;
        streamUrl: z.ZodOptional<z.ZodURL>;
        assetId: z.ZodOptional<z.ZodString>;
        languageCode: z.ZodOptional<z.ZodString>;
        startAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        metadata: z.ZodOptional<z.ZodObject<{
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
            format: z.ZodOptional<z.ZodString>;
            codec: z.ZodOptional<z.ZodString>;
            bitrate: z.ZodOptional<z.ZodNumber>;
            fps: z.ZodOptional<z.ZodNumber>;
            hasAudio: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>>;
        transcriptFormat: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
    }, z.core.$strip>;
    volume: z.ZodPrefault<z.ZodNumber>;
    muted: z.ZodPrefault<z.ZodBoolean>;
}, z.core.$strict>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"COLOR">;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        background: z.ZodString;
    }, z.core.$strip>;
}, z.core.$strict>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"GRADIENT">;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        text: z.ZodOptional<z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        background: z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>;
    }, z.core.$strip>;
}, z.core.$strict>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    timeline: z.ZodObject<{
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>;
    animations: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            startAt: z.ZodOptional<z.ZodNumber>;
            animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                id: z.ZodString;
                presetId: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                duration: z.ZodOptional<z.ZodNumber>;
                data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"style">;
                    properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                        fromData: z.ZodString;
                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            cycle: "cycle";
                            useFallback: "useFallback";
                            clamp: "clamp";
                        }>>>;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"byIndex">;
                        expression: z.ZodString;
                        fallbackValue: z.ZodOptional<z.ZodAny>;
                    }, z.core.$strip>]>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"splitText">;
                    by: z.ZodEnum<{
                        words: "words";
                        lines: "lines";
                        chars: "chars";
                    }>;
                }, z.core.$strip>], "type">>>>;
                revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                timeline: z.ZodArray<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    target: z.ZodOptional<z.ZodString>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    tweens: z.ZodArray<z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodNumber>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodNumber>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                tween: z.ZodObject<{
                    method: z.ZodEnum<{
                        set: "set";
                        to: "to";
                        from: "from";
                        fromTo: "fromTo";
                    }>;
                    position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodObject<{
                        anchor: z.ZodString;
                        anchorPoint: z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                        }>>;
                        alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                            start: "start";
                            end: "end";
                            center: "center";
                        }>>>;
                        offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>]>>;
                    vars: z.ZodObject<{
                        from: z.ZodOptional<z.ZodObject<{
                            opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>>;
                        duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        ease: z.ZodOptional<z.ZodString>;
                        delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>;
                        stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                            type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                            dataKey: z.ZodOptional<z.ZodString>;
                            referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                            each: z.ZodOptional<z.ZodNumber>;
                            from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber]>>;
                            grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodNumber]>], null>>;
                            axis: z.ZodOptional<z.ZodEnum<{
                                x: "x";
                                y: "y";
                            }>>;
                            ease: z.ZodOptional<z.ZodString>;
                            amount: z.ZodOptional<z.ZodNumber>;
                        }, z.core.$strip>]>>;
                    }, z.core.$catchall<z.ZodAny>>;
                }, z.core.$strip>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
            }, z.core.$strip>]>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>>>;
        subtitlesSeed: z.ZodOptional<z.ZodInt>;
    }, z.core.$strip>>;
    effects: z.ZodPrefault<z.ZodObject<{
        enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
        map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"colorAdjustment">;
            brightness: z.ZodPrefault<z.ZodNumber>;
            contrast: z.ZodPrefault<z.ZodNumber>;
            saturation: z.ZodPrefault<z.ZodNumber>;
            hue: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>], "type">, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"layoutSplit">;
            pieces: z.ZodOptional<z.ZodInt>;
            sceneWidth: z.ZodOptional<z.ZodNumber>;
            sceneHeight: z.ZodOptional<z.ZodNumber>;
            chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"rotationRandomizer">;
            maxRotation: z.ZodPrefault<z.ZodNumber>;
            animate: z.ZodPrefault<z.ZodBoolean>;
            seed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>, z.ZodObject<{
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            type: z.ZodLiteral<"blur">;
            radius: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<"fillBackgroundBlur">;
            enabled: z.ZodPrefault<z.ZodBoolean>;
            blurAmount: z.ZodPrefault<z.ZodNumber>;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            blur: z.ZodOptional<z.ZodNumber>;
            size: z.ZodOptional<z.ZodNumber>;
            offsetX: z.ZodOptional<z.ZodNumber>;
            offsetY: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            type: z.ZodLiteral<"textShadow">;
        }, z.core.$strip>, z.ZodObject<{
            intensity: z.ZodPrefault<z.ZodNumber>;
            blendMode: z.ZodPrefault<z.ZodEnum<{
                color: "color";
                normal: "normal";
                multiply: "multiply";
                screen: "screen";
                overlay: "overlay";
                darken: "darken";
                lighten: "lighten";
                "color-dodge": "color-dodge";
                "color-burn": "color-burn";
                "hard-light": "hard-light";
                "soft-light": "soft-light";
                difference: "difference";
                exclusion: "exclusion";
                hue: "hue";
                saturation: "saturation";
                luminosity: "luminosity";
            }>>;
            enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            preset: z.ZodOptional<z.ZodString>;
            color: z.ZodString;
            size: z.ZodOptional<z.ZodNumber>;
            opacity: z.ZodOptional<z.ZodNumber>;
            style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                solid: "solid";
                dashed: "dashed";
                dotted: "dotted";
            }>>>;
            dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            type: z.ZodLiteral<"textOutline">;
        }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>, any[] | Record<string, {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "blur";
            radius: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "colorAdjustment";
            brightness: number;
            contrast: number;
            saturation: number;
            hue: number;
            enabled?: boolean | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "layoutSplit";
            enabled?: boolean | undefined;
            pieces?: number | undefined;
            sceneWidth?: number | undefined;
            sceneHeight?: number | undefined;
            chunks?: Record<string, any>[] | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "rotationRandomizer";
            maxRotation: number;
            animate: boolean;
            enabled?: boolean | undefined;
            seed?: number | undefined;
        } | {
            type: "fillBackgroundBlur";
            enabled: boolean;
            blurAmount: number;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            type: "textShadow";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            color?: string | undefined;
            blur?: number | undefined;
            size?: number | undefined;
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            opacity?: number | undefined;
        } | {
            intensity: number;
            blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
            color: string;
            type: "textOutline";
            enabled?: boolean | undefined;
            preset?: string | undefined;
            size?: number | undefined;
            opacity?: number | undefined;
            style?: "solid" | "dashed" | "dotted" | undefined;
            dashArray?: number[] | undefined;
        }>>>>;
    }, z.core.$strip>>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    order: z.ZodPrefault<z.ZodNumber>;
    checksum: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"SUBTITLES">;
    source: z.ZodOptional<z.ZodObject<{
        streamUrl: z.ZodOptional<z.ZodURL>;
        assetId: z.ZodOptional<z.ZodString>;
        languageCode: z.ZodOptional<z.ZodString>;
        startAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | null | undefined, number | undefined>>;
        metadata: z.ZodOptional<z.ZodObject<{
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
            format: z.ZodOptional<z.ZodString>;
            codec: z.ZodOptional<z.ZodString>;
            bitrate: z.ZodOptional<z.ZodNumber>;
            fps: z.ZodOptional<z.ZodNumber>;
            hasAudio: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>>;
        transcriptFormat: z.ZodOptional<z.ZodString>;
        url: z.ZodOptional<z.ZodURL>;
    }, z.core.$strip>>;
    timingAnchor: z.ZodObject<{
        mode: z.ZodEnum<{
            ASSET_USAGE: "ASSET_USAGE";
            COMPONENT: "COMPONENT";
        }>;
        assetId: z.ZodOptional<z.ZodString>;
        layerId: z.ZodOptional<z.ZodString>;
        componentId: z.ZodOptional<z.ZodString>;
        offset: z.ZodPrefault<z.ZodNumber>;
    }, z.core.$strip>;
    text: z.ZodOptional<z.ZodString>;
    appearance: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        width: z.ZodNumber;
        height: z.ZodNumber;
        offsetX: z.ZodOptional<z.ZodNumber>;
        offsetY: z.ZodOptional<z.ZodNumber>;
        opacity: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        rotation: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleX: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        scaleY: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        background: z.ZodOptional<z.ZodPrefault<z.ZodNullable<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodBoolean>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                wrapper: "wrapper";
                element: "element";
            }>>>;
            radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>]>, z.ZodTransform<{
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target: string;
            radius: number;
        }, string | {
            type: "linear" | "radial";
            colors: string[];
            stops?: number[] | undefined;
            angle?: number | undefined;
            position?: string | undefined;
            shape?: "ellipse" | "circle" | undefined;
        } | {
            enabled: boolean;
            color: string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            };
            target?: "wrapper" | "element" | undefined;
            radius?: number | undefined;
        }>>>>>;
        backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        text: z.ZodObject<{
            fontFamily: z.ZodString;
            fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "px";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>;
            fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                normal: "normal";
                bold: "bold";
                bolder: "bolder";
                lighter: "lighter";
                100: "100";
                200: "200";
                300: "300";
                400: "400";
                500: "500";
                600: "600";
                700: "700";
                800: "800";
                900: "900";
            }>>>;
            fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                source: z.ZodEnum<{
                    custom: "custom";
                    google: "google";
                }>;
                family: z.ZodOptional<z.ZodString>;
                category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, z.core.$strip>>>;
            lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                value: number;
                unit: "em";
            }, number>>, z.ZodObject<{
                value: z.ZodNumber;
                unit: z.ZodPrefault<z.ZodEnum<{
                    px: "px";
                    em: "em";
                    rem: "rem";
                    "%": "%";
                }>>;
            }, z.core.$strip>]>>>;
            color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>;
            textAlign: z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
                justify: "justify";
            }>;
            textTransform: z.ZodOptional<z.ZodEnum<{
                none: "none";
                uppercase: "uppercase";
                lowercase: "lowercase";
                capitalize: "capitalize";
            }>>;
            shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodNumber>;
                size: z.ZodOptional<z.ZodNumber>;
                offsetX: z.ZodOptional<z.ZodNumber>;
                offsetY: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodNumber>;
                opacity: z.ZodOptional<z.ZodNumber>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            }, z.core.$strip>>>;
            activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                    angle: z.ZodOptional<z.ZodNumber>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>;
                fontWeight: z.ZodOptional<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>;
                scale: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingX: z.ZodOptional<z.ZodNumber>;
                backgroundPaddingY: z.ZodOptional<z.ZodNumber>;
                backgroundBorderRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>>>;
            highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
                angle: z.ZodOptional<z.ZodNumber>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>>>;
        }, z.core.$strip>;
        verticalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            top: "top";
            bottom: "bottom";
        }>>;
        horizontalAlign: z.ZodOptional<z.ZodEnum<{
            center: "center";
            left: "left";
            right: "right";
        }>>;
        hasAIEmojis: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        aiEmojisPlacement: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
            top: "top";
            bottom: "bottom";
        }>>>;
        aiEmojisPlacementOffset: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        aiEmojis: z.ZodOptional<z.ZodArray<z.ZodObject<{
            text: z.ZodString;
            emoji: z.ZodString;
            startAt: z.ZodNumber;
            endAt: z.ZodNumber;
            componentId: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>>>;
        highlighterColor1: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
        highlighterColor2: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
        highlighterColor3: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodNumber>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
    }, z.core.$strip>;
}, z.core.$strict>], "type">;
export type StructuredFontSize = z.infer<typeof StructuredFontSizeShape>;
export type TextAppearance = z.infer<typeof TextAppearanceShape>;
export type Appearance = z.infer<typeof AppearanceShape>;
export type ComponentTimeline = z.infer<typeof ComponentTimelineShape>;
export type Animation = z.infer<typeof AnimationShape>;
export type ComponentSource = z.infer<typeof ComponentSourceShape>;
export type TimingAnchor = z.infer<typeof TimingAnchorShape>;
export type ComponentBase = z.infer<typeof ComponentBaseShape>;
export type TextComponent = z.infer<typeof TextComponentShape>;
export type ImageComponent = z.infer<typeof ImageComponentShape>;
export type GifComponent = z.infer<typeof GifComponentShape>;
export type VideoComponent = z.infer<typeof VideoComponentShape>;
export type ShapeComponent = z.infer<typeof ShapeComponentShape>;
export type AudioComponent = z.infer<typeof AudioComponentShape>;
export type ColorComponent = z.infer<typeof ColorComponentShape>;
export type GradientComponent = z.infer<typeof GradientComponentShape>;
export type SubtitleComponent = z.infer<typeof SubtitleComponentShape>;
export type FontSource = z.infer<typeof FontSourceShape>;
export type Component = z.infer<typeof ComponentShape>;
export type LinearProgressConfig = z.infer<typeof LinearProgressConfigShape>;
export type PerimeterProgressConfig = z.infer<typeof PerimeterProgressConfigShape>;
export type RadialProgressConfig = z.infer<typeof RadialProgressConfigShape>;
export type DoubleProgressConfig = z.infer<typeof DoubleProgressConfigShape>;
export type CustomProgressConfig = z.infer<typeof CustomProgressConfigShape>;
export type ProgressConfig = z.infer<typeof ProgressConfigShape>;
export type ComponentInput = z.input<typeof ComponentShape>;
export type TextComponentInput = z.input<typeof TextComponentShape>;
export type ImageComponentInput = z.input<typeof ImageComponentShape>;
export type GifComponentInput = z.input<typeof GifComponentShape>;
export type VideoComponentInput = z.input<typeof VideoComponentShape>;
export type ShapeComponentInput = z.input<typeof ShapeComponentShape>;
export type AudioComponentInput = z.input<typeof AudioComponentShape>;
export type ColorComponentInput = z.input<typeof ColorComponentShape>;
export type GradientComponentInput = z.input<typeof GradientComponentShape>;
export type SubtitleComponentInput = z.input<typeof SubtitleComponentShape>;
export type ComponentEffect = z.infer<typeof ComponentEffectShape>;
