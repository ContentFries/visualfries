import { z } from 'zod';
/**
 * Basic asset metadata
 */
export declare const SceneAssetMetadataShape: z.ZodObject<{
    width: z.ZodOptional<z.ZodNumber>;
    height: z.ZodOptional<z.ZodNumber>;
    duration: z.ZodOptional<z.ZodNumber>;
    format: z.ZodOptional<z.ZodString>;
    codec: z.ZodOptional<z.ZodString>;
    bitrate: z.ZodOptional<z.ZodNumber>;
    fps: z.ZodOptional<z.ZodNumber>;
    hasAudio: z.ZodOptional<z.ZodBoolean>;
}, z.core.$strip>;
export declare const AssetSubtitleShape: z.ZodObject<{
    url: z.ZodOptional<z.ZodURL>;
    language_code: z.ZodOptional<z.ZodString>;
    subtitles: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        start_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
        end_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
        text: z.ZodString;
        words: z.ZodOptional<z.ZodArray<z.ZodTuple<[z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>], z.ZodUnion<readonly [z.ZodOptional<z.ZodObject<{
            s: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            si: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            c: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>;
            e: z.ZodOptional<z.ZodString>;
            w: z.ZodOptional<z.ZodString>;
            f: z.ZodOptional<z.ZodString>;
        }, z.core.$catchall<z.ZodAny>>>, z.ZodNull]>>>>;
        enlarge: z.ZodOptional<z.ZodPipe<z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodNumber, z.ZodPipe<z.ZodString, z.ZodTransform<number | true, string>>]>>, z.ZodTransform<number | undefined, number | boolean | undefined>>>;
        visible: z.ZodOptional<z.ZodBoolean>;
        emoji: z.ZodOptional<z.ZodString>;
        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
        background: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
    }, z.core.$strip>>>;
}, z.core.$strip>;
/**
 * Asset schema for centralized asset registry
 */
export declare const SceneAssetShape: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodEnum<{
        IMAGE: "IMAGE";
        GIF: "GIF";
        VIDEO: "VIDEO";
        AUDIO: "AUDIO";
        FONT: "FONT";
    }>;
    url: z.ZodString;
    path: z.ZodOptional<z.ZodString>;
    language_code: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodObject<{
        width: z.ZodOptional<z.ZodNumber>;
        height: z.ZodOptional<z.ZodNumber>;
        duration: z.ZodOptional<z.ZodNumber>;
        format: z.ZodOptional<z.ZodString>;
        codec: z.ZodOptional<z.ZodString>;
        bitrate: z.ZodOptional<z.ZodNumber>;
        fps: z.ZodOptional<z.ZodNumber>;
        hasAudio: z.ZodOptional<z.ZodBoolean>;
    }, z.core.$strip>>;
    subtitles: z.ZodOptional<z.ZodArray<z.ZodObject<{
        url: z.ZodOptional<z.ZodURL>;
        language_code: z.ZodOptional<z.ZodString>;
        subtitles: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            start_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            end_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            text: z.ZodString;
            words: z.ZodOptional<z.ZodArray<z.ZodTuple<[z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>], z.ZodUnion<readonly [z.ZodOptional<z.ZodObject<{
                s: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                si: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                c: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>;
                e: z.ZodOptional<z.ZodString>;
                w: z.ZodOptional<z.ZodString>;
                f: z.ZodOptional<z.ZodString>;
            }, z.core.$catchall<z.ZodAny>>>, z.ZodNull]>>>>;
            enlarge: z.ZodOptional<z.ZodPipe<z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodNumber, z.ZodPipe<z.ZodString, z.ZodTransform<number | true, string>>]>>, z.ZodTransform<number | undefined, number | boolean | undefined>>>;
            visible: z.ZodOptional<z.ZodBoolean>;
            emoji: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>;
            background: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>;
        }, z.core.$strip>>>;
    }, z.core.$strip>>>;
}, z.core.$strip>;
export declare const SceneSubtitlesSettingsShape: z.ZodObject<{
    punctuation: z.ZodPrefault<z.ZodBoolean>;
    mergeGap: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
    data: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
        id: z.ZodString;
        start_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
        end_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
        text: z.ZodString;
        words: z.ZodOptional<z.ZodArray<z.ZodTuple<[z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>], z.ZodUnion<readonly [z.ZodOptional<z.ZodObject<{
            s: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            si: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            c: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>;
            e: z.ZodOptional<z.ZodString>;
            w: z.ZodOptional<z.ZodString>;
            f: z.ZodOptional<z.ZodString>;
        }, z.core.$catchall<z.ZodAny>>>, z.ZodNull]>>>>;
        enlarge: z.ZodOptional<z.ZodPipe<z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodNumber, z.ZodPipe<z.ZodString, z.ZodTransform<number | true, string>>]>>, z.ZodTransform<number | undefined, number | boolean | undefined>>>;
        visible: z.ZodOptional<z.ZodBoolean>;
        emoji: z.ZodOptional<z.ZodString>;
        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
        background: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
    }, z.core.$strip>, z.ZodObject<{
        id: z.ZodString;
        start_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
        end_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
        text: z.ZodString;
        words: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            start_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            end_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            text: z.ZodString;
            position: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        }, z.core.$strip>>>;
        enlarge: z.ZodOptional<z.ZodPipe<z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodNumber, z.ZodPipe<z.ZodString, z.ZodTransform<number | true, string>>]>>, z.ZodTransform<number | undefined, number | boolean | undefined>>>;
        visible: z.ZodOptional<z.ZodBoolean>;
        emoji: z.ZodOptional<z.ZodString>;
        color: z.ZodOptional<z.ZodString>;
        background: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>]>>>>>;
}, z.core.$strip>;
/**
 * Core scene settings schema defining dimensions, background, and other scene-level properties
 */
export declare const SceneSettingsShape: z.ZodObject<{
    width: z.ZodNumber;
    height: z.ZodNumber;
    language_code: z.ZodOptional<z.ZodString>;
    duration: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    startAt: z.ZodOptional<z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>>;
    endAt: z.ZodOptional<z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>>;
    trimZones: z.ZodOptional<z.ZodArray<z.ZodObject<{
        start: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        end: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    }, z.core.$strip>>>;
    fps: z.ZodPrefault<z.ZodInt>;
    backgroundColor: z.ZodPrefault<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
        type: z.ZodEnum<{
            linear: "linear";
            radial: "radial";
        }>;
        colors: z.ZodArray<z.ZodString>;
        stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
        angle: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        position: z.ZodOptional<z.ZodString>;
        shape: z.ZodOptional<z.ZodEnum<{
            ellipse: "ellipse";
            circle: "circle";
        }>>;
    }, z.core.$strip>]>>;
    audio: z.ZodOptional<z.ZodObject<{
        src: z.ZodOptional<z.ZodURL>;
        volume: z.ZodPrefault<z.ZodNumber>;
        muted: z.ZodPrefault<z.ZodBoolean>;
    }, z.core.$strip>>;
    subtitles: z.ZodOptional<z.ZodObject<{
        punctuation: z.ZodPrefault<z.ZodBoolean>;
        mergeGap: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
        data: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
            id: z.ZodString;
            start_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            end_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            text: z.ZodString;
            words: z.ZodOptional<z.ZodArray<z.ZodTuple<[z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>], z.ZodUnion<readonly [z.ZodOptional<z.ZodObject<{
                s: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                si: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                c: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>;
                e: z.ZodOptional<z.ZodString>;
                w: z.ZodOptional<z.ZodString>;
                f: z.ZodOptional<z.ZodString>;
            }, z.core.$catchall<z.ZodAny>>>, z.ZodNull]>>>>;
            enlarge: z.ZodOptional<z.ZodPipe<z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodNumber, z.ZodPipe<z.ZodString, z.ZodTransform<number | true, string>>]>>, z.ZodTransform<number | undefined, number | boolean | undefined>>>;
            visible: z.ZodOptional<z.ZodBoolean>;
            emoji: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>;
            background: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>;
        }, z.core.$strip>, z.ZodObject<{
            id: z.ZodString;
            start_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            end_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            text: z.ZodString;
            words: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                start_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                end_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                text: z.ZodString;
                position: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>>>;
            enlarge: z.ZodOptional<z.ZodPipe<z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodNumber, z.ZodPipe<z.ZodString, z.ZodTransform<number | true, string>>]>>, z.ZodTransform<number | undefined, number | boolean | undefined>>>;
            visible: z.ZodOptional<z.ZodBoolean>;
            emoji: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
            background: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>]>>>>>;
    }, z.core.$strip>>;
}, z.core.$strip>;
/**
 * Schema for a scene layer in v2.0
 * Layers organize related components and control their stacking order
 */
export declare const SceneLayerShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    order: z.ZodPrefault<z.ZodNumber>;
    visible: z.ZodPrefault<z.ZodBoolean>;
    muted: z.ZodPrefault<z.ZodBoolean>;
    components: z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        timeline: z.ZodObject<{
            startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
        }, z.core.$strip>;
        animations: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    id: z.ZodString;
                    presetId: z.ZodOptional<z.ZodString>;
                    version: z.ZodOptional<z.ZodString>;
                    description: z.ZodOptional<z.ZodString>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                    setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"style">;
                        properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"splitText">;
                        by: z.ZodEnum<{
                            words: "words";
                            lines: "lines";
                            chars: "chars";
                        }>;
                    }, z.core.$strip>], "type">>>>;
                    revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    timeline: z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        target: z.ZodOptional<z.ZodString>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        tweens: z.ZodArray<z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>, z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    tween: z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                }, z.core.$strip>]>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>>>;
            subtitlesSeed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>>;
        effects: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"colorAdjustment">;
                brightness: z.ZodPrefault<z.ZodNumber>;
                contrast: z.ZodPrefault<z.ZodNumber>;
                saturation: z.ZodPrefault<z.ZodNumber>;
                hue: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>], "type">, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"layoutSplit">;
                pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"rotationRandomizer">;
                maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animate: z.ZodPrefault<z.ZodBoolean>;
                seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"fillBackgroundBlur">;
                enabled: z.ZodPrefault<z.ZodBoolean>;
                blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                type: z.ZodLiteral<"textShadow">;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                type: z.ZodLiteral<"textOutline">;
            }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>, any[] | Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>>>>;
        }, z.core.$strip>>;
        visible: z.ZodPrefault<z.ZodBoolean>;
        order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        checksum: z.ZodOptional<z.ZodString>;
        type: z.ZodLiteral<"TEXT">;
        text: z.ZodString;
        isAIEmoji: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        appearance: z.ZodObject<{
            x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodBoolean>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    wrapper: "wrapper";
                    element: "element";
                }>>>;
                radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target: string;
                radius: number;
            } | null, string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | null>>>;
            backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            text: z.ZodObject<{
                fontFamily: z.ZodString;
                fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "px";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>;
                fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>>;
                fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    source: z.ZodEnum<{
                        custom: "custom";
                        google: "google";
                    }>;
                    family: z.ZodOptional<z.ZodString>;
                    category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                }, z.core.$strip>>>;
                lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                textAlign: z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                    justify: "justify";
                }>;
                textTransform: z.ZodOptional<z.ZodEnum<{
                    none: "none";
                    uppercase: "uppercase";
                    lowercase: "lowercase";
                    capitalize: "capitalize";
                }>>;
                shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                }, z.core.$strip>>>;
                activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>>;
            }, z.core.$strip>;
            verticalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                top: "top";
                bottom: "bottom";
            }>>;
            horizontalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
            }>>;
        }, z.core.$strip>;
    }, z.core.$strict>, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        timeline: z.ZodObject<{
            startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
        }, z.core.$strip>;
        animations: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    id: z.ZodString;
                    presetId: z.ZodOptional<z.ZodString>;
                    version: z.ZodOptional<z.ZodString>;
                    description: z.ZodOptional<z.ZodString>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                    setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"style">;
                        properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"splitText">;
                        by: z.ZodEnum<{
                            words: "words";
                            lines: "lines";
                            chars: "chars";
                        }>;
                    }, z.core.$strip>], "type">>>>;
                    revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    timeline: z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        target: z.ZodOptional<z.ZodString>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        tweens: z.ZodArray<z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>, z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    tween: z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                }, z.core.$strip>]>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>>>;
            subtitlesSeed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>>;
        effects: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"colorAdjustment">;
                brightness: z.ZodPrefault<z.ZodNumber>;
                contrast: z.ZodPrefault<z.ZodNumber>;
                saturation: z.ZodPrefault<z.ZodNumber>;
                hue: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>], "type">, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"layoutSplit">;
                pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"rotationRandomizer">;
                maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animate: z.ZodPrefault<z.ZodBoolean>;
                seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"fillBackgroundBlur">;
                enabled: z.ZodPrefault<z.ZodBoolean>;
                blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                type: z.ZodLiteral<"textShadow">;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                type: z.ZodLiteral<"textOutline">;
            }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>, any[] | Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>>>>;
        }, z.core.$strip>>;
        visible: z.ZodPrefault<z.ZodBoolean>;
        order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        checksum: z.ZodOptional<z.ZodString>;
        type: z.ZodLiteral<"IMAGE">;
        source: z.ZodObject<{
            url: z.ZodOptional<z.ZodURL>;
            streamUrl: z.ZodOptional<z.ZodURL>;
            assetId: z.ZodOptional<z.ZodString>;
            languageCode: z.ZodOptional<z.ZodString>;
            startAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
            endAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
            metadata: z.ZodOptional<z.ZodObject<{
                width: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                height: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                format: z.ZodOptional<z.ZodString>;
                codec: z.ZodOptional<z.ZodString>;
                bitrate: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                fps: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                hasAudio: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strip>>;
            transcriptFormat: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>;
        appearance: z.ZodObject<{
            x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodBoolean>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    wrapper: "wrapper";
                    element: "element";
                }>>>;
                radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target: string;
                radius: number;
            } | null, string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | null>>>;
            text: z.ZodOptional<z.ZodObject<{
                fontFamily: z.ZodString;
                fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "px";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>;
                fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>>;
                fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    source: z.ZodEnum<{
                        custom: "custom";
                        google: "google";
                    }>;
                    family: z.ZodOptional<z.ZodString>;
                    category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                }, z.core.$strip>>>;
                lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                textAlign: z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                    justify: "justify";
                }>;
                textTransform: z.ZodOptional<z.ZodEnum<{
                    none: "none";
                    uppercase: "uppercase";
                    lowercase: "lowercase";
                    capitalize: "capitalize";
                }>>;
                shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                }, z.core.$strip>>>;
                activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>>;
            }, z.core.$strip>>;
            verticalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                top: "top";
                bottom: "bottom";
            }>>;
            horizontalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
            }>>;
            backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>;
        crop: z.ZodOptional<z.ZodObject<{
            xPercent: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            yPercent: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            widthPercent: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            heightPercent: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        }, z.core.$strip>>;
    }, z.core.$strict>, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        timeline: z.ZodObject<{
            startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
        }, z.core.$strip>;
        animations: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    id: z.ZodString;
                    presetId: z.ZodOptional<z.ZodString>;
                    version: z.ZodOptional<z.ZodString>;
                    description: z.ZodOptional<z.ZodString>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                    setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"style">;
                        properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"splitText">;
                        by: z.ZodEnum<{
                            words: "words";
                            lines: "lines";
                            chars: "chars";
                        }>;
                    }, z.core.$strip>], "type">>>>;
                    revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    timeline: z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        target: z.ZodOptional<z.ZodString>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        tweens: z.ZodArray<z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>, z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    tween: z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                }, z.core.$strip>]>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>>>;
            subtitlesSeed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>>;
        effects: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"colorAdjustment">;
                brightness: z.ZodPrefault<z.ZodNumber>;
                contrast: z.ZodPrefault<z.ZodNumber>;
                saturation: z.ZodPrefault<z.ZodNumber>;
                hue: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>], "type">, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"layoutSplit">;
                pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"rotationRandomizer">;
                maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animate: z.ZodPrefault<z.ZodBoolean>;
                seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"fillBackgroundBlur">;
                enabled: z.ZodPrefault<z.ZodBoolean>;
                blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                type: z.ZodLiteral<"textShadow">;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                type: z.ZodLiteral<"textOutline">;
            }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>, any[] | Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>>>>;
        }, z.core.$strip>>;
        visible: z.ZodPrefault<z.ZodBoolean>;
        order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        checksum: z.ZodOptional<z.ZodString>;
        type: z.ZodLiteral<"GIF">;
        source: z.ZodObject<{
            url: z.ZodOptional<z.ZodURL>;
            streamUrl: z.ZodOptional<z.ZodURL>;
            assetId: z.ZodOptional<z.ZodString>;
            languageCode: z.ZodOptional<z.ZodString>;
            startAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
            endAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
            metadata: z.ZodOptional<z.ZodObject<{
                width: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                height: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                format: z.ZodOptional<z.ZodString>;
                codec: z.ZodOptional<z.ZodString>;
                bitrate: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                fps: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                hasAudio: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strip>>;
            transcriptFormat: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>;
        appearance: z.ZodObject<{
            x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodBoolean>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    wrapper: "wrapper";
                    element: "element";
                }>>>;
                radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target: string;
                radius: number;
            } | null, string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | null>>>;
            text: z.ZodOptional<z.ZodObject<{
                fontFamily: z.ZodString;
                fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "px";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>;
                fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>>;
                fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    source: z.ZodEnum<{
                        custom: "custom";
                        google: "google";
                    }>;
                    family: z.ZodOptional<z.ZodString>;
                    category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                }, z.core.$strip>>>;
                lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                textAlign: z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                    justify: "justify";
                }>;
                textTransform: z.ZodOptional<z.ZodEnum<{
                    none: "none";
                    uppercase: "uppercase";
                    lowercase: "lowercase";
                    capitalize: "capitalize";
                }>>;
                shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                }, z.core.$strip>>>;
                activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>>;
            }, z.core.$strip>>;
            verticalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                top: "top";
                bottom: "bottom";
            }>>;
            horizontalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
            }>>;
            backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>;
        playback: z.ZodOptional<z.ZodObject<{
            loop: z.ZodPrefault<z.ZodBoolean>;
            speed: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        }, z.core.$strip>>;
    }, z.core.$strict>, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        timeline: z.ZodObject<{
            startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
        }, z.core.$strip>;
        animations: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    id: z.ZodString;
                    presetId: z.ZodOptional<z.ZodString>;
                    version: z.ZodOptional<z.ZodString>;
                    description: z.ZodOptional<z.ZodString>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                    setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"style">;
                        properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"splitText">;
                        by: z.ZodEnum<{
                            words: "words";
                            lines: "lines";
                            chars: "chars";
                        }>;
                    }, z.core.$strip>], "type">>>>;
                    revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    timeline: z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        target: z.ZodOptional<z.ZodString>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        tweens: z.ZodArray<z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>, z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    tween: z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                }, z.core.$strip>]>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>>>;
            subtitlesSeed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>>;
        effects: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"colorAdjustment">;
                brightness: z.ZodPrefault<z.ZodNumber>;
                contrast: z.ZodPrefault<z.ZodNumber>;
                saturation: z.ZodPrefault<z.ZodNumber>;
                hue: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>], "type">, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"layoutSplit">;
                pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"rotationRandomizer">;
                maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animate: z.ZodPrefault<z.ZodBoolean>;
                seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"fillBackgroundBlur">;
                enabled: z.ZodPrefault<z.ZodBoolean>;
                blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                type: z.ZodLiteral<"textShadow">;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                type: z.ZodLiteral<"textOutline">;
            }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>, any[] | Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>>>>;
        }, z.core.$strip>>;
        visible: z.ZodPrefault<z.ZodBoolean>;
        order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        checksum: z.ZodOptional<z.ZodString>;
        type: z.ZodLiteral<"VIDEO">;
        source: z.ZodObject<{
            url: z.ZodOptional<z.ZodURL>;
            streamUrl: z.ZodOptional<z.ZodURL>;
            assetId: z.ZodOptional<z.ZodString>;
            languageCode: z.ZodOptional<z.ZodString>;
            startAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
            endAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
            metadata: z.ZodOptional<z.ZodObject<{
                width: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                height: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                format: z.ZodOptional<z.ZodString>;
                codec: z.ZodOptional<z.ZodString>;
                bitrate: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                fps: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                hasAudio: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strip>>;
            transcriptFormat: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>;
        appearance: z.ZodObject<{
            x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodBoolean>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    wrapper: "wrapper";
                    element: "element";
                }>>>;
                radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target: string;
                radius: number;
            } | null, string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | null>>>;
            text: z.ZodOptional<z.ZodObject<{
                fontFamily: z.ZodString;
                fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "px";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>;
                fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>>;
                fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    source: z.ZodEnum<{
                        custom: "custom";
                        google: "google";
                    }>;
                    family: z.ZodOptional<z.ZodString>;
                    category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                }, z.core.$strip>>>;
                lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                textAlign: z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                    justify: "justify";
                }>;
                textTransform: z.ZodOptional<z.ZodEnum<{
                    none: "none";
                    uppercase: "uppercase";
                    lowercase: "lowercase";
                    capitalize: "capitalize";
                }>>;
                shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                }, z.core.$strip>>>;
                activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>>;
            }, z.core.$strip>>;
            verticalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                top: "top";
                bottom: "bottom";
            }>>;
            horizontalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
            }>>;
            backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>;
        volume: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        muted: z.ZodPrefault<z.ZodBoolean>;
        playback: z.ZodOptional<z.ZodObject<{
            autoplay: z.ZodPrefault<z.ZodBoolean>;
            loop: z.ZodPrefault<z.ZodBoolean>;
            playbackRate: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            startAt: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            endAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        }, z.core.$strip>>;
        crop: z.ZodOptional<z.ZodObject<{
            x: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            y: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            width: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            height: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        }, z.core.$strip>>;
    }, z.core.$strict>, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        timeline: z.ZodObject<{
            startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
        }, z.core.$strip>;
        animations: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    id: z.ZodString;
                    presetId: z.ZodOptional<z.ZodString>;
                    version: z.ZodOptional<z.ZodString>;
                    description: z.ZodOptional<z.ZodString>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                    setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"style">;
                        properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"splitText">;
                        by: z.ZodEnum<{
                            words: "words";
                            lines: "lines";
                            chars: "chars";
                        }>;
                    }, z.core.$strip>], "type">>>>;
                    revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    timeline: z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        target: z.ZodOptional<z.ZodString>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        tweens: z.ZodArray<z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>, z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    tween: z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                }, z.core.$strip>]>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>>>;
            subtitlesSeed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>>;
        effects: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"colorAdjustment">;
                brightness: z.ZodPrefault<z.ZodNumber>;
                contrast: z.ZodPrefault<z.ZodNumber>;
                saturation: z.ZodPrefault<z.ZodNumber>;
                hue: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>], "type">, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"layoutSplit">;
                pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"rotationRandomizer">;
                maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animate: z.ZodPrefault<z.ZodBoolean>;
                seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"fillBackgroundBlur">;
                enabled: z.ZodPrefault<z.ZodBoolean>;
                blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                type: z.ZodLiteral<"textShadow">;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                type: z.ZodLiteral<"textOutline">;
            }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>, any[] | Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>>>>;
        }, z.core.$strip>>;
        visible: z.ZodPrefault<z.ZodBoolean>;
        order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        checksum: z.ZodOptional<z.ZodString>;
        type: z.ZodLiteral<"SHAPE">;
        shape: z.ZodUnion<readonly [z.ZodObject<{
            type: z.ZodLiteral<"progress">;
            progressConfig: z.ZodPrefault<z.ZodOptional<z.ZodDiscriminatedUnion<[z.ZodObject<{
                type: z.ZodLiteral<"linear">;
                direction: z.ZodPrefault<z.ZodEnum<{
                    horizontal: "horizontal";
                    vertical: "vertical";
                }>>;
                reverse: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                anchor: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    start: "start";
                    end: "end";
                    center: "center";
                }>>>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"perimeter">;
                startCorner: z.ZodPrefault<z.ZodEnum<{
                    "top-left": "top-left";
                    "top-right": "top-right";
                    "bottom-right": "bottom-right";
                    "bottom-left": "bottom-left";
                }>>;
                clockwise: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                strokeWidth: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"radial">;
                startAngle: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                clockwise: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                innerRadius: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                strokeWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                capStyle: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    butt: "butt";
                    round: "round";
                    square: "square";
                }>>>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"double">;
                paths: z.ZodArray<z.ZodObject<{
                    direction: z.ZodEnum<{
                        horizontal: "horizontal";
                        vertical: "vertical";
                    }>;
                    position: z.ZodEnum<{
                        left: "left";
                        right: "right";
                        top: "top";
                        bottom: "bottom";
                    }>;
                    reverse: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    offset: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                }, z.core.$strip>>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"custom">;
                pathData: z.ZodString;
                strokeWidth: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                capStyle: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    butt: "butt";
                    round: "round";
                    square: "square";
                }>>>;
            }, z.core.$strip>], "type">>>;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodEnum<{
                path: "path";
                ellipse: "ellipse";
                circle: "circle";
                rectangle: "rectangle";
                triangle: "triangle";
                polygon: "polygon";
                star: "star";
            }>;
            points: z.ZodOptional<z.ZodArray<z.ZodObject<{
                x: z.ZodNumber;
                y: z.ZodNumber;
            }, z.core.$strip>>>;
            pathData: z.ZodOptional<z.ZodString>;
            cornerRadius: z.ZodOptional<z.ZodNumber>;
        }, z.core.$strip>]>;
        appearance: z.ZodObject<{
            x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodBoolean>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    wrapper: "wrapper";
                    element: "element";
                }>>>;
                radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target: string;
                radius: number;
            } | null, string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | null>>>;
            text: z.ZodOptional<z.ZodObject<{
                fontFamily: z.ZodString;
                fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "px";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>;
                fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>>;
                fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    source: z.ZodEnum<{
                        custom: "custom";
                        google: "google";
                    }>;
                    family: z.ZodOptional<z.ZodString>;
                    category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                }, z.core.$strip>>>;
                lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                textAlign: z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                    justify: "justify";
                }>;
                textTransform: z.ZodOptional<z.ZodEnum<{
                    none: "none";
                    uppercase: "uppercase";
                    lowercase: "lowercase";
                    capitalize: "capitalize";
                }>>;
                shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                }, z.core.$strip>>>;
                activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>>;
            }, z.core.$strip>>;
            verticalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                top: "top";
                bottom: "bottom";
            }>>;
            horizontalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
            }>>;
            backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>;
        }, z.core.$strip>;
    }, z.core.$strict>, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        timeline: z.ZodObject<{
            startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
        }, z.core.$strip>;
        animations: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    id: z.ZodString;
                    presetId: z.ZodOptional<z.ZodString>;
                    version: z.ZodOptional<z.ZodString>;
                    description: z.ZodOptional<z.ZodString>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                    setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"style">;
                        properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"splitText">;
                        by: z.ZodEnum<{
                            words: "words";
                            lines: "lines";
                            chars: "chars";
                        }>;
                    }, z.core.$strip>], "type">>>>;
                    revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    timeline: z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        target: z.ZodOptional<z.ZodString>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        tweens: z.ZodArray<z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>, z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    tween: z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                }, z.core.$strip>]>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>>>;
            subtitlesSeed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>>;
        effects: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"colorAdjustment">;
                brightness: z.ZodPrefault<z.ZodNumber>;
                contrast: z.ZodPrefault<z.ZodNumber>;
                saturation: z.ZodPrefault<z.ZodNumber>;
                hue: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>], "type">, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"layoutSplit">;
                pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"rotationRandomizer">;
                maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animate: z.ZodPrefault<z.ZodBoolean>;
                seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"fillBackgroundBlur">;
                enabled: z.ZodPrefault<z.ZodBoolean>;
                blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                type: z.ZodLiteral<"textShadow">;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                type: z.ZodLiteral<"textOutline">;
            }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>, any[] | Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>>>>;
        }, z.core.$strip>>;
        visible: z.ZodPrefault<z.ZodBoolean>;
        order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        checksum: z.ZodOptional<z.ZodString>;
        type: z.ZodLiteral<"AUDIO">;
        source: z.ZodObject<{
            url: z.ZodOptional<z.ZodURL>;
            streamUrl: z.ZodOptional<z.ZodURL>;
            assetId: z.ZodOptional<z.ZodString>;
            languageCode: z.ZodOptional<z.ZodString>;
            startAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
            endAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
            metadata: z.ZodOptional<z.ZodObject<{
                width: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                height: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                format: z.ZodOptional<z.ZodString>;
                codec: z.ZodOptional<z.ZodString>;
                bitrate: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                fps: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                hasAudio: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strip>>;
            transcriptFormat: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>;
        appearance: z.ZodObject<{
            x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodBoolean>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    wrapper: "wrapper";
                    element: "element";
                }>>>;
                radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target: string;
                radius: number;
            } | null, string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | null>>>;
            text: z.ZodOptional<z.ZodObject<{
                fontFamily: z.ZodString;
                fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "px";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>;
                fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>>;
                fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    source: z.ZodEnum<{
                        custom: "custom";
                        google: "google";
                    }>;
                    family: z.ZodOptional<z.ZodString>;
                    category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                }, z.core.$strip>>>;
                lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                textAlign: z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                    justify: "justify";
                }>;
                textTransform: z.ZodOptional<z.ZodEnum<{
                    none: "none";
                    uppercase: "uppercase";
                    lowercase: "lowercase";
                    capitalize: "capitalize";
                }>>;
                shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                }, z.core.$strip>>>;
                activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>>;
            }, z.core.$strip>>;
            verticalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                top: "top";
                bottom: "bottom";
            }>>;
            horizontalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
            }>>;
            backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
        }, z.core.$strip>;
        volume: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        muted: z.ZodPrefault<z.ZodBoolean>;
    }, z.core.$strict>, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        timeline: z.ZodObject<{
            startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
        }, z.core.$strip>;
        animations: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    id: z.ZodString;
                    presetId: z.ZodOptional<z.ZodString>;
                    version: z.ZodOptional<z.ZodString>;
                    description: z.ZodOptional<z.ZodString>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                    setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"style">;
                        properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"splitText">;
                        by: z.ZodEnum<{
                            words: "words";
                            lines: "lines";
                            chars: "chars";
                        }>;
                    }, z.core.$strip>], "type">>>>;
                    revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    timeline: z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        target: z.ZodOptional<z.ZodString>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        tweens: z.ZodArray<z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>, z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    tween: z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                }, z.core.$strip>]>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>>>;
            subtitlesSeed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>>;
        effects: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"colorAdjustment">;
                brightness: z.ZodPrefault<z.ZodNumber>;
                contrast: z.ZodPrefault<z.ZodNumber>;
                saturation: z.ZodPrefault<z.ZodNumber>;
                hue: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>], "type">, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"layoutSplit">;
                pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"rotationRandomizer">;
                maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animate: z.ZodPrefault<z.ZodBoolean>;
                seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"fillBackgroundBlur">;
                enabled: z.ZodPrefault<z.ZodBoolean>;
                blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                type: z.ZodLiteral<"textShadow">;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                type: z.ZodLiteral<"textOutline">;
            }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>, any[] | Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>>>>;
        }, z.core.$strip>>;
        visible: z.ZodPrefault<z.ZodBoolean>;
        order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        checksum: z.ZodOptional<z.ZodString>;
        type: z.ZodLiteral<"COLOR">;
        appearance: z.ZodObject<{
            x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            text: z.ZodOptional<z.ZodObject<{
                fontFamily: z.ZodString;
                fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "px";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>;
                fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>>;
                fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    source: z.ZodEnum<{
                        custom: "custom";
                        google: "google";
                    }>;
                    family: z.ZodOptional<z.ZodString>;
                    category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                }, z.core.$strip>>>;
                lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                textAlign: z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                    justify: "justify";
                }>;
                textTransform: z.ZodOptional<z.ZodEnum<{
                    none: "none";
                    uppercase: "uppercase";
                    lowercase: "lowercase";
                    capitalize: "capitalize";
                }>>;
                shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                }, z.core.$strip>>>;
                activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>>;
            }, z.core.$strip>>;
            verticalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                top: "top";
                bottom: "bottom";
            }>>;
            horizontalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
            }>>;
            backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            background: z.ZodString;
        }, z.core.$strip>;
    }, z.core.$strict>, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        timeline: z.ZodObject<{
            startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
        }, z.core.$strip>;
        animations: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    id: z.ZodString;
                    presetId: z.ZodOptional<z.ZodString>;
                    version: z.ZodOptional<z.ZodString>;
                    description: z.ZodOptional<z.ZodString>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                    setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"style">;
                        properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"splitText">;
                        by: z.ZodEnum<{
                            words: "words";
                            lines: "lines";
                            chars: "chars";
                        }>;
                    }, z.core.$strip>], "type">>>>;
                    revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    timeline: z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        target: z.ZodOptional<z.ZodString>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        tweens: z.ZodArray<z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>, z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    tween: z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                }, z.core.$strip>]>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>>>;
            subtitlesSeed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>>;
        effects: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"colorAdjustment">;
                brightness: z.ZodPrefault<z.ZodNumber>;
                contrast: z.ZodPrefault<z.ZodNumber>;
                saturation: z.ZodPrefault<z.ZodNumber>;
                hue: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>], "type">, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"layoutSplit">;
                pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"rotationRandomizer">;
                maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animate: z.ZodPrefault<z.ZodBoolean>;
                seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"fillBackgroundBlur">;
                enabled: z.ZodPrefault<z.ZodBoolean>;
                blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                type: z.ZodLiteral<"textShadow">;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                type: z.ZodLiteral<"textOutline">;
            }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>, any[] | Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>>>>;
        }, z.core.$strip>>;
        visible: z.ZodPrefault<z.ZodBoolean>;
        order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        checksum: z.ZodOptional<z.ZodString>;
        type: z.ZodLiteral<"GRADIENT">;
        appearance: z.ZodObject<{
            x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            text: z.ZodOptional<z.ZodObject<{
                fontFamily: z.ZodString;
                fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "px";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>;
                fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>>;
                fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    source: z.ZodEnum<{
                        custom: "custom";
                        google: "google";
                    }>;
                    family: z.ZodOptional<z.ZodString>;
                    category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                }, z.core.$strip>>>;
                lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                textAlign: z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                    justify: "justify";
                }>;
                textTransform: z.ZodOptional<z.ZodEnum<{
                    none: "none";
                    uppercase: "uppercase";
                    lowercase: "lowercase";
                    capitalize: "capitalize";
                }>>;
                shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                }, z.core.$strip>>>;
                activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>>;
            }, z.core.$strip>>;
            verticalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                top: "top";
                bottom: "bottom";
            }>>;
            horizontalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
            }>>;
            backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            background: z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>;
        }, z.core.$strip>;
    }, z.core.$strict>, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        timeline: z.ZodObject<{
            startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
        }, z.core.$strip>;
        animations: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    id: z.ZodString;
                    presetId: z.ZodOptional<z.ZodString>;
                    version: z.ZodOptional<z.ZodString>;
                    description: z.ZodOptional<z.ZodString>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                    setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                        type: z.ZodLiteral<"style">;
                        properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                            fromData: z.ZodString;
                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                cycle: "cycle";
                                useFallback: "useFallback";
                                clamp: "clamp";
                            }>>>;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"byIndex">;
                            expression: z.ZodString;
                            fallbackValue: z.ZodOptional<z.ZodAny>;
                        }, z.core.$strip>]>>>;
                    }, z.core.$strip>, z.ZodObject<{
                        type: z.ZodLiteral<"splitText">;
                        by: z.ZodEnum<{
                            words: "words";
                            lines: "lines";
                            chars: "chars";
                        }>;
                    }, z.core.$strip>], "type">>>>;
                    revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    timeline: z.ZodArray<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        target: z.ZodOptional<z.ZodString>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        tweens: z.ZodArray<z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>, z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    tween: z.ZodObject<{
                        method: z.ZodEnum<{
                            set: "set";
                            to: "to";
                            from: "from";
                            fromTo: "fromTo";
                        }>;
                        position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                            anchor: z.ZodString;
                            anchorPoint: z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                            }>>;
                            alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                start: "start";
                                end: "end";
                                center: "center";
                            }>>>;
                            offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                        }, z.core.$strip>]>>;
                        vars: z.ZodObject<{
                            from: z.ZodOptional<z.ZodObject<{
                                opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>>;
                            duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            ease: z.ZodOptional<z.ZodString>;
                            delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>;
                            stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                dataKey: z.ZodOptional<z.ZodString>;
                                referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                axis: z.ZodOptional<z.ZodEnum<{
                                    x: "x";
                                    y: "y";
                                }>>;
                                ease: z.ZodOptional<z.ZodString>;
                                amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            }, z.core.$strip>]>>;
                        }, z.core.$catchall<z.ZodAny>>;
                    }, z.core.$strip>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                }, z.core.$strip>]>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>>>;
            subtitlesSeed: z.ZodOptional<z.ZodInt>;
        }, z.core.$strip>>;
        effects: z.ZodPrefault<z.ZodObject<{
            enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
            map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"colorAdjustment">;
                brightness: z.ZodPrefault<z.ZodNumber>;
                contrast: z.ZodPrefault<z.ZodNumber>;
                saturation: z.ZodPrefault<z.ZodNumber>;
                hue: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>], "type">, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"layoutSplit">;
                pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"rotationRandomizer">;
                maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                animate: z.ZodPrefault<z.ZodBoolean>;
                seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                type: z.ZodLiteral<"blur">;
                radius: z.ZodPrefault<z.ZodNumber>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodLiteral<"fillBackgroundBlur">;
                enabled: z.ZodPrefault<z.ZodBoolean>;
                blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                type: z.ZodLiteral<"textShadow">;
            }, z.core.$strip>, z.ZodObject<{
                intensity: z.ZodPrefault<z.ZodNumber>;
                blendMode: z.ZodPrefault<z.ZodEnum<{
                    color: "color";
                    normal: "normal";
                    multiply: "multiply";
                    screen: "screen";
                    overlay: "overlay";
                    darken: "darken";
                    lighten: "lighten";
                    "color-dodge": "color-dodge";
                    "color-burn": "color-burn";
                    "hard-light": "hard-light";
                    "soft-light": "soft-light";
                    difference: "difference";
                    exclusion: "exclusion";
                    hue: "hue";
                    saturation: "saturation";
                    luminosity: "luminosity";
                }>>;
                enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                preset: z.ZodOptional<z.ZodString>;
                color: z.ZodString;
                size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    solid: "solid";
                    dashed: "dashed";
                    dotted: "dotted";
                }>>>;
                dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                type: z.ZodLiteral<"textOutline">;
            }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>, any[] | Record<string, {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "blur";
                radius: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "colorAdjustment";
                brightness: number;
                contrast: number;
                saturation: number;
                hue: number;
                enabled?: boolean | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "layoutSplit";
                enabled?: boolean | undefined;
                pieces?: number | undefined;
                sceneWidth?: number | undefined;
                sceneHeight?: number | undefined;
                chunks?: Record<string, any>[] | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "rotationRandomizer";
                maxRotation: number;
                animate: boolean;
                enabled?: boolean | undefined;
                seed?: number | undefined;
            } | {
                type: "fillBackgroundBlur";
                enabled: boolean;
                blurAmount: number;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                type: "textShadow";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                color?: string | undefined;
                blur?: number | undefined;
                size?: number | undefined;
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                opacity?: number | undefined;
            } | {
                intensity: number;
                blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                color: string;
                type: "textOutline";
                enabled?: boolean | undefined;
                preset?: string | undefined;
                size?: number | undefined;
                opacity?: number | undefined;
                style?: "solid" | "dashed" | "dotted" | undefined;
                dashArray?: number[] | undefined;
            }>>>>;
        }, z.core.$strip>>;
        visible: z.ZodPrefault<z.ZodBoolean>;
        order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        checksum: z.ZodOptional<z.ZodString>;
        type: z.ZodLiteral<"SUBTITLES">;
        source: z.ZodOptional<z.ZodObject<{
            streamUrl: z.ZodOptional<z.ZodURL>;
            assetId: z.ZodOptional<z.ZodString>;
            languageCode: z.ZodOptional<z.ZodString>;
            startAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
            endAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
            metadata: z.ZodOptional<z.ZodObject<{
                width: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                height: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                format: z.ZodOptional<z.ZodString>;
                codec: z.ZodOptional<z.ZodString>;
                bitrate: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                fps: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                hasAudio: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strip>>;
            transcriptFormat: z.ZodOptional<z.ZodString>;
            url: z.ZodOptional<z.ZodURL>;
        }, z.core.$strip>>;
        timingAnchor: z.ZodObject<{
            mode: z.ZodEnum<{
                ASSET_USAGE: "ASSET_USAGE";
                COMPONENT: "COMPONENT";
            }>;
            assetId: z.ZodOptional<z.ZodString>;
            layerId: z.ZodOptional<z.ZodString>;
            componentId: z.ZodOptional<z.ZodString>;
            offset: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
        }, z.core.$strip>;
        text: z.ZodOptional<z.ZodString>;
        appearance: z.ZodObject<{
            x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
            offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodBoolean>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    wrapper: "wrapper";
                    element: "element";
                }>>>;
                radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target: string;
                radius: number;
            } | null, string | {
                type: "linear" | "radial";
                colors: string[];
                stops?: number[] | undefined;
                angle?: number | undefined;
                position?: string | undefined;
                shape?: "ellipse" | "circle" | undefined;
            } | {
                enabled: boolean;
                color: string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                };
                target?: "wrapper" | "element" | undefined;
                radius?: number | undefined;
            } | null>>>;
            backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            text: z.ZodObject<{
                fontFamily: z.ZodString;
                fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "px";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>;
                fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                    normal: "normal";
                    bold: "bold";
                    bolder: "bolder";
                    lighter: "lighter";
                    100: "100";
                    200: "200";
                    300: "300";
                    400: "400";
                    500: "500";
                    600: "600";
                    700: "700";
                    800: "800";
                    900: "900";
                }>>>;
                fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    id: z.ZodOptional<z.ZodString>;
                    source: z.ZodEnum<{
                        custom: "custom";
                        google: "google";
                    }>;
                    family: z.ZodOptional<z.ZodString>;
                    category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                    fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                }, z.core.$strip>>>;
                lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                    value: number;
                    unit: "em";
                }, number>>, z.ZodObject<{
                    value: z.ZodNumber;
                    unit: z.ZodPrefault<z.ZodEnum<{
                        px: "px";
                        em: "em";
                        rem: "rem";
                        "%": "%";
                    }>>;
                }, z.core.$strip>]>>>;
                color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>;
                textAlign: z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                    justify: "justify";
                }>;
                textTransform: z.ZodOptional<z.ZodEnum<{
                    none: "none";
                    uppercase: "uppercase";
                    lowercase: "lowercase";
                    capitalize: "capitalize";
                }>>;
                shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                }, z.core.$strip>>>;
                activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>;
                    fontWeight: z.ZodOptional<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>;
                    scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>>>;
            }, z.core.$strip>;
            verticalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                top: "top";
                bottom: "bottom";
            }>>;
            horizontalAlign: z.ZodOptional<z.ZodEnum<{
                center: "center";
                left: "left";
                right: "right";
            }>>;
            hasAIEmojis: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            aiEmojisPlacement: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                top: "top";
                bottom: "bottom";
            }>>>;
            aiEmojisPlacementOffset: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
            aiEmojis: z.ZodOptional<z.ZodArray<z.ZodObject<{
                text: z.ZodString;
                emoji: z.ZodString;
                startAt: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                endAt: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                componentId: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>>>;
            highlighterColor1: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>;
            highlighterColor2: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>;
            highlighterColor3: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                type: z.ZodEnum<{
                    linear: "linear";
                    radial: "radial";
                }>;
                colors: z.ZodArray<z.ZodString>;
                stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                position: z.ZodOptional<z.ZodString>;
                shape: z.ZodOptional<z.ZodEnum<{
                    ellipse: "ellipse";
                    circle: "circle";
                }>>;
            }, z.core.$strip>]>>;
        }, z.core.$strip>;
    }, z.core.$strict>], "type">>>;
}, z.core.$strip>;
/**
 * Audio track schema for global audio playback
 */
export declare const AudioTrackShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    url: z.ZodString;
    volume: z.ZodPrefault<z.ZodNumber>;
    startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | undefined, number | undefined>>;
    muted: z.ZodPrefault<z.ZodBoolean>;
}, z.core.$strip>;
/**
 * Schema for transitions between components
 */
export declare const SceneTransitionShape: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    fromComponentId: z.ZodString;
    toComponentId: z.ZodString;
    type: z.ZodString;
    presetId: z.ZodOptional<z.ZodString>;
    duration: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
    parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, z.core.$strip>;
/**
 * Schema for the main scene structure in v2.0
 */
export declare const SceneShape: z.ZodObject<{
    /** Unique identifier for the scene */
    id: z.ZodString;
    /** Schema version */
    version: z.ZodOptional<z.ZodCoercedString<unknown>>;
    /** Optional name for the scene */
    name: z.ZodOptional<z.ZodString>;
    /** Scene settings */
    settings: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
        language_code: z.ZodOptional<z.ZodString>;
        duration: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        startAt: z.ZodOptional<z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>>;
        endAt: z.ZodOptional<z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>>;
        trimZones: z.ZodOptional<z.ZodArray<z.ZodObject<{
            start: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
            end: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        }, z.core.$strip>>>;
        fps: z.ZodPrefault<z.ZodInt>;
        backgroundColor: z.ZodPrefault<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
            type: z.ZodEnum<{
                linear: "linear";
                radial: "radial";
            }>;
            colors: z.ZodArray<z.ZodString>;
            stops: z.ZodOptional<z.ZodArray<z.ZodNumber>>;
            angle: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            position: z.ZodOptional<z.ZodString>;
            shape: z.ZodOptional<z.ZodEnum<{
                ellipse: "ellipse";
                circle: "circle";
            }>>;
        }, z.core.$strip>]>>;
        audio: z.ZodOptional<z.ZodObject<{
            src: z.ZodOptional<z.ZodURL>;
            volume: z.ZodPrefault<z.ZodNumber>;
            muted: z.ZodPrefault<z.ZodBoolean>;
        }, z.core.$strip>>;
        subtitles: z.ZodOptional<z.ZodObject<{
            punctuation: z.ZodPrefault<z.ZodBoolean>;
            mergeGap: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
            data: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
                id: z.ZodString;
                start_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                end_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                text: z.ZodString;
                words: z.ZodOptional<z.ZodArray<z.ZodTuple<[z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>], z.ZodUnion<readonly [z.ZodOptional<z.ZodObject<{
                    s: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    si: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    c: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>;
                    e: z.ZodOptional<z.ZodString>;
                    w: z.ZodOptional<z.ZodString>;
                    f: z.ZodOptional<z.ZodString>;
                }, z.core.$catchall<z.ZodAny>>>, z.ZodNull]>>>>;
                enlarge: z.ZodOptional<z.ZodPipe<z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodNumber, z.ZodPipe<z.ZodString, z.ZodTransform<number | true, string>>]>>, z.ZodTransform<number | undefined, number | boolean | undefined>>>;
                visible: z.ZodOptional<z.ZodBoolean>;
                emoji: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>;
                background: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>;
            }, z.core.$strip>, z.ZodObject<{
                id: z.ZodString;
                start_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                end_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                text: z.ZodString;
                words: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    start_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                    end_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                    text: z.ZodString;
                    position: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>>>;
                enlarge: z.ZodOptional<z.ZodPipe<z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodNumber, z.ZodPipe<z.ZodString, z.ZodTransform<number | true, string>>]>>, z.ZodTransform<number | undefined, number | boolean | undefined>>>;
                visible: z.ZodOptional<z.ZodBoolean>;
                emoji: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodString>;
                background: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>]>>>>>;
        }, z.core.$strip>>;
    }, z.core.$strip>;
    /** Assets registry */
    assets: z.ZodPrefault<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodEnum<{
            IMAGE: "IMAGE";
            GIF: "GIF";
            VIDEO: "VIDEO";
            AUDIO: "AUDIO";
            FONT: "FONT";
        }>;
        url: z.ZodString;
        path: z.ZodOptional<z.ZodString>;
        language_code: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodObject<{
            width: z.ZodOptional<z.ZodNumber>;
            height: z.ZodOptional<z.ZodNumber>;
            duration: z.ZodOptional<z.ZodNumber>;
            format: z.ZodOptional<z.ZodString>;
            codec: z.ZodOptional<z.ZodString>;
            bitrate: z.ZodOptional<z.ZodNumber>;
            fps: z.ZodOptional<z.ZodNumber>;
            hasAudio: z.ZodOptional<z.ZodBoolean>;
        }, z.core.$strip>>;
        subtitles: z.ZodOptional<z.ZodArray<z.ZodObject<{
            url: z.ZodOptional<z.ZodURL>;
            language_code: z.ZodOptional<z.ZodString>;
            subtitles: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                start_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                end_at: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                text: z.ZodString;
                words: z.ZodOptional<z.ZodArray<z.ZodTuple<[z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>], z.ZodUnion<readonly [z.ZodOptional<z.ZodObject<{
                    s: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    si: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    c: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>;
                    e: z.ZodOptional<z.ZodString>;
                    w: z.ZodOptional<z.ZodString>;
                    f: z.ZodOptional<z.ZodString>;
                }, z.core.$catchall<z.ZodAny>>>, z.ZodNull]>>>>;
                enlarge: z.ZodOptional<z.ZodPipe<z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodNumber, z.ZodPipe<z.ZodString, z.ZodTransform<number | true, string>>]>>, z.ZodTransform<number | undefined, number | boolean | undefined>>>;
                visible: z.ZodOptional<z.ZodBoolean>;
                emoji: z.ZodOptional<z.ZodString>;
                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>;
                background: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>;
            }, z.core.$strip>>>;
        }, z.core.$strip>>>;
    }, z.core.$strip>>>;
    /** Layers in the scene */
    layers: z.ZodPrefault<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        order: z.ZodPrefault<z.ZodNumber>;
        visible: z.ZodPrefault<z.ZodBoolean>;
        muted: z.ZodPrefault<z.ZodBoolean>;
        components: z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
            id: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            timeline: z.ZodObject<{
                startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
                endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            }, z.core.$strip>;
            animations: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        id: z.ZodString;
                        presetId: z.ZodOptional<z.ZodString>;
                        version: z.ZodOptional<z.ZodString>;
                        description: z.ZodOptional<z.ZodString>;
                        duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                        setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"style">;
                            properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"splitText">;
                            by: z.ZodEnum<{
                                words: "words";
                                lines: "lines";
                                chars: "chars";
                            }>;
                        }, z.core.$strip>], "type">>>>;
                        revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        timeline: z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            target: z.ZodOptional<z.ZodString>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            tweens: z.ZodArray<z.ZodObject<{
                                method: z.ZodEnum<{
                                    set: "set";
                                    to: "to";
                                    from: "from";
                                    fromTo: "fromTo";
                                }>;
                                position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                    anchor: z.ZodString;
                                    anchorPoint: z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                    }>>;
                                    alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                        center: "center";
                                    }>>>;
                                    offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                                }, z.core.$strip>]>>;
                                vars: z.ZodObject<{
                                    from: z.ZodOptional<z.ZodObject<{
                                        opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                    }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>>>;
                                    duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                        type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                        dataKey: z.ZodOptional<z.ZodString>;
                                        referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                        each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                        from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                        grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                        axis: z.ZodOptional<z.ZodEnum<{
                                            x: "x";
                                            y: "y";
                                        }>>;
                                        ease: z.ZodOptional<z.ZodString>;
                                        amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodAny>>;
                            }, z.core.$strip>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>, z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        tween: z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>;
                        target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                    }, z.core.$strip>]>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                }, z.core.$strip>>>;
                subtitlesSeed: z.ZodOptional<z.ZodInt>;
            }, z.core.$strip>>;
            effects: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"colorAdjustment">;
                    brightness: z.ZodPrefault<z.ZodNumber>;
                    contrast: z.ZodPrefault<z.ZodNumber>;
                    saturation: z.ZodPrefault<z.ZodNumber>;
                    hue: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>], "type">, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"layoutSplit">;
                    pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"rotationRandomizer">;
                    maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animate: z.ZodPrefault<z.ZodBoolean>;
                    seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"fillBackgroundBlur">;
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    type: z.ZodLiteral<"textShadow">;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    type: z.ZodLiteral<"textOutline">;
                }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>, any[] | Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>>>>;
            }, z.core.$strip>>;
            visible: z.ZodPrefault<z.ZodBoolean>;
            order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            checksum: z.ZodOptional<z.ZodString>;
            type: z.ZodLiteral<"TEXT">;
            text: z.ZodString;
            isAIEmoji: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            appearance: z.ZodObject<{
                x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        wrapper: "wrapper";
                        element: "element";
                    }>>>;
                    radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
                }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target: string;
                    radius: number;
                } | null, string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | null>>>;
                backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                text: z.ZodObject<{
                    fontFamily: z.ZodString;
                    fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "px";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>;
                    fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>>;
                    fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        source: z.ZodEnum<{
                            custom: "custom";
                            google: "google";
                        }>;
                        family: z.ZodOptional<z.ZodString>;
                        category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                        subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>>>;
                    lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    textAlign: z.ZodEnum<{
                        center: "center";
                        left: "left";
                        right: "right";
                        justify: "justify";
                    }>;
                    textTransform: z.ZodOptional<z.ZodEnum<{
                        none: "none";
                        uppercase: "uppercase";
                        lowercase: "lowercase";
                        capitalize: "capitalize";
                    }>>;
                    shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodOptional<z.ZodString>;
                        blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodString;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                            solid: "solid";
                            dashed: "dashed";
                            dotted: "dotted";
                        }>>>;
                        dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    }, z.core.$strip>>>;
                    activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>>;
                }, z.core.$strip>;
                verticalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    top: "top";
                    bottom: "bottom";
                }>>;
                horizontalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                }>>;
            }, z.core.$strip>;
        }, z.core.$strict>, z.ZodObject<{
            id: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            timeline: z.ZodObject<{
                startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
                endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            }, z.core.$strip>;
            animations: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        id: z.ZodString;
                        presetId: z.ZodOptional<z.ZodString>;
                        version: z.ZodOptional<z.ZodString>;
                        description: z.ZodOptional<z.ZodString>;
                        duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                        setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"style">;
                            properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"splitText">;
                            by: z.ZodEnum<{
                                words: "words";
                                lines: "lines";
                                chars: "chars";
                            }>;
                        }, z.core.$strip>], "type">>>>;
                        revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        timeline: z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            target: z.ZodOptional<z.ZodString>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            tweens: z.ZodArray<z.ZodObject<{
                                method: z.ZodEnum<{
                                    set: "set";
                                    to: "to";
                                    from: "from";
                                    fromTo: "fromTo";
                                }>;
                                position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                    anchor: z.ZodString;
                                    anchorPoint: z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                    }>>;
                                    alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                        center: "center";
                                    }>>>;
                                    offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                                }, z.core.$strip>]>>;
                                vars: z.ZodObject<{
                                    from: z.ZodOptional<z.ZodObject<{
                                        opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                    }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>>>;
                                    duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                        type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                        dataKey: z.ZodOptional<z.ZodString>;
                                        referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                        each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                        from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                        grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                        axis: z.ZodOptional<z.ZodEnum<{
                                            x: "x";
                                            y: "y";
                                        }>>;
                                        ease: z.ZodOptional<z.ZodString>;
                                        amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodAny>>;
                            }, z.core.$strip>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>, z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        tween: z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>;
                        target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                    }, z.core.$strip>]>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                }, z.core.$strip>>>;
                subtitlesSeed: z.ZodOptional<z.ZodInt>;
            }, z.core.$strip>>;
            effects: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"colorAdjustment">;
                    brightness: z.ZodPrefault<z.ZodNumber>;
                    contrast: z.ZodPrefault<z.ZodNumber>;
                    saturation: z.ZodPrefault<z.ZodNumber>;
                    hue: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>], "type">, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"layoutSplit">;
                    pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"rotationRandomizer">;
                    maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animate: z.ZodPrefault<z.ZodBoolean>;
                    seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"fillBackgroundBlur">;
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    type: z.ZodLiteral<"textShadow">;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    type: z.ZodLiteral<"textOutline">;
                }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>, any[] | Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>>>>;
            }, z.core.$strip>>;
            visible: z.ZodPrefault<z.ZodBoolean>;
            order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            checksum: z.ZodOptional<z.ZodString>;
            type: z.ZodLiteral<"IMAGE">;
            source: z.ZodObject<{
                url: z.ZodOptional<z.ZodURL>;
                streamUrl: z.ZodOptional<z.ZodURL>;
                assetId: z.ZodOptional<z.ZodString>;
                languageCode: z.ZodOptional<z.ZodString>;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
                endAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    width: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    height: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    format: z.ZodOptional<z.ZodString>;
                    codec: z.ZodOptional<z.ZodString>;
                    bitrate: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    fps: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    hasAudio: z.ZodOptional<z.ZodBoolean>;
                }, z.core.$strip>>;
                transcriptFormat: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>;
            appearance: z.ZodObject<{
                x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        wrapper: "wrapper";
                        element: "element";
                    }>>>;
                    radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
                }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target: string;
                    radius: number;
                } | null, string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | null>>>;
                text: z.ZodOptional<z.ZodObject<{
                    fontFamily: z.ZodString;
                    fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "px";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>;
                    fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>>;
                    fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        source: z.ZodEnum<{
                            custom: "custom";
                            google: "google";
                        }>;
                        family: z.ZodOptional<z.ZodString>;
                        category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                        subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>>>;
                    lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    textAlign: z.ZodEnum<{
                        center: "center";
                        left: "left";
                        right: "right";
                        justify: "justify";
                    }>;
                    textTransform: z.ZodOptional<z.ZodEnum<{
                        none: "none";
                        uppercase: "uppercase";
                        lowercase: "lowercase";
                        capitalize: "capitalize";
                    }>>;
                    shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodOptional<z.ZodString>;
                        blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodString;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                            solid: "solid";
                            dashed: "dashed";
                            dotted: "dotted";
                        }>>>;
                        dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    }, z.core.$strip>>>;
                    activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>>;
                }, z.core.$strip>>;
                verticalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    top: "top";
                    bottom: "bottom";
                }>>;
                horizontalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                }>>;
                backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>;
            crop: z.ZodOptional<z.ZodObject<{
                xPercent: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                yPercent: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                widthPercent: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                heightPercent: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>>;
        }, z.core.$strict>, z.ZodObject<{
            id: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            timeline: z.ZodObject<{
                startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
                endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            }, z.core.$strip>;
            animations: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        id: z.ZodString;
                        presetId: z.ZodOptional<z.ZodString>;
                        version: z.ZodOptional<z.ZodString>;
                        description: z.ZodOptional<z.ZodString>;
                        duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                        setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"style">;
                            properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"splitText">;
                            by: z.ZodEnum<{
                                words: "words";
                                lines: "lines";
                                chars: "chars";
                            }>;
                        }, z.core.$strip>], "type">>>>;
                        revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        timeline: z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            target: z.ZodOptional<z.ZodString>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            tweens: z.ZodArray<z.ZodObject<{
                                method: z.ZodEnum<{
                                    set: "set";
                                    to: "to";
                                    from: "from";
                                    fromTo: "fromTo";
                                }>;
                                position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                    anchor: z.ZodString;
                                    anchorPoint: z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                    }>>;
                                    alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                        center: "center";
                                    }>>>;
                                    offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                                }, z.core.$strip>]>>;
                                vars: z.ZodObject<{
                                    from: z.ZodOptional<z.ZodObject<{
                                        opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                    }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>>>;
                                    duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                        type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                        dataKey: z.ZodOptional<z.ZodString>;
                                        referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                        each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                        from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                        grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                        axis: z.ZodOptional<z.ZodEnum<{
                                            x: "x";
                                            y: "y";
                                        }>>;
                                        ease: z.ZodOptional<z.ZodString>;
                                        amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodAny>>;
                            }, z.core.$strip>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>, z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        tween: z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>;
                        target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                    }, z.core.$strip>]>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                }, z.core.$strip>>>;
                subtitlesSeed: z.ZodOptional<z.ZodInt>;
            }, z.core.$strip>>;
            effects: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"colorAdjustment">;
                    brightness: z.ZodPrefault<z.ZodNumber>;
                    contrast: z.ZodPrefault<z.ZodNumber>;
                    saturation: z.ZodPrefault<z.ZodNumber>;
                    hue: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>], "type">, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"layoutSplit">;
                    pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"rotationRandomizer">;
                    maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animate: z.ZodPrefault<z.ZodBoolean>;
                    seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"fillBackgroundBlur">;
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    type: z.ZodLiteral<"textShadow">;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    type: z.ZodLiteral<"textOutline">;
                }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>, any[] | Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>>>>;
            }, z.core.$strip>>;
            visible: z.ZodPrefault<z.ZodBoolean>;
            order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            checksum: z.ZodOptional<z.ZodString>;
            type: z.ZodLiteral<"GIF">;
            source: z.ZodObject<{
                url: z.ZodOptional<z.ZodURL>;
                streamUrl: z.ZodOptional<z.ZodURL>;
                assetId: z.ZodOptional<z.ZodString>;
                languageCode: z.ZodOptional<z.ZodString>;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
                endAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    width: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    height: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    format: z.ZodOptional<z.ZodString>;
                    codec: z.ZodOptional<z.ZodString>;
                    bitrate: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    fps: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    hasAudio: z.ZodOptional<z.ZodBoolean>;
                }, z.core.$strip>>;
                transcriptFormat: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>;
            appearance: z.ZodObject<{
                x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        wrapper: "wrapper";
                        element: "element";
                    }>>>;
                    radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
                }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target: string;
                    radius: number;
                } | null, string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | null>>>;
                text: z.ZodOptional<z.ZodObject<{
                    fontFamily: z.ZodString;
                    fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "px";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>;
                    fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>>;
                    fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        source: z.ZodEnum<{
                            custom: "custom";
                            google: "google";
                        }>;
                        family: z.ZodOptional<z.ZodString>;
                        category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                        subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>>>;
                    lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    textAlign: z.ZodEnum<{
                        center: "center";
                        left: "left";
                        right: "right";
                        justify: "justify";
                    }>;
                    textTransform: z.ZodOptional<z.ZodEnum<{
                        none: "none";
                        uppercase: "uppercase";
                        lowercase: "lowercase";
                        capitalize: "capitalize";
                    }>>;
                    shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodOptional<z.ZodString>;
                        blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodString;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                            solid: "solid";
                            dashed: "dashed";
                            dotted: "dotted";
                        }>>>;
                        dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    }, z.core.$strip>>>;
                    activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>>;
                }, z.core.$strip>>;
                verticalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    top: "top";
                    bottom: "bottom";
                }>>;
                horizontalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                }>>;
                backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>;
            playback: z.ZodOptional<z.ZodObject<{
                loop: z.ZodPrefault<z.ZodBoolean>;
                speed: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>>;
        }, z.core.$strict>, z.ZodObject<{
            id: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            timeline: z.ZodObject<{
                startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
                endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            }, z.core.$strip>;
            animations: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        id: z.ZodString;
                        presetId: z.ZodOptional<z.ZodString>;
                        version: z.ZodOptional<z.ZodString>;
                        description: z.ZodOptional<z.ZodString>;
                        duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                        setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"style">;
                            properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"splitText">;
                            by: z.ZodEnum<{
                                words: "words";
                                lines: "lines";
                                chars: "chars";
                            }>;
                        }, z.core.$strip>], "type">>>>;
                        revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        timeline: z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            target: z.ZodOptional<z.ZodString>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            tweens: z.ZodArray<z.ZodObject<{
                                method: z.ZodEnum<{
                                    set: "set";
                                    to: "to";
                                    from: "from";
                                    fromTo: "fromTo";
                                }>;
                                position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                    anchor: z.ZodString;
                                    anchorPoint: z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                    }>>;
                                    alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                        center: "center";
                                    }>>>;
                                    offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                                }, z.core.$strip>]>>;
                                vars: z.ZodObject<{
                                    from: z.ZodOptional<z.ZodObject<{
                                        opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                    }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>>>;
                                    duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                        type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                        dataKey: z.ZodOptional<z.ZodString>;
                                        referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                        each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                        from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                        grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                        axis: z.ZodOptional<z.ZodEnum<{
                                            x: "x";
                                            y: "y";
                                        }>>;
                                        ease: z.ZodOptional<z.ZodString>;
                                        amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodAny>>;
                            }, z.core.$strip>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>, z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        tween: z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>;
                        target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                    }, z.core.$strip>]>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                }, z.core.$strip>>>;
                subtitlesSeed: z.ZodOptional<z.ZodInt>;
            }, z.core.$strip>>;
            effects: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"colorAdjustment">;
                    brightness: z.ZodPrefault<z.ZodNumber>;
                    contrast: z.ZodPrefault<z.ZodNumber>;
                    saturation: z.ZodPrefault<z.ZodNumber>;
                    hue: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>], "type">, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"layoutSplit">;
                    pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"rotationRandomizer">;
                    maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animate: z.ZodPrefault<z.ZodBoolean>;
                    seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"fillBackgroundBlur">;
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    type: z.ZodLiteral<"textShadow">;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    type: z.ZodLiteral<"textOutline">;
                }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>, any[] | Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>>>>;
            }, z.core.$strip>>;
            visible: z.ZodPrefault<z.ZodBoolean>;
            order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            checksum: z.ZodOptional<z.ZodString>;
            type: z.ZodLiteral<"VIDEO">;
            source: z.ZodObject<{
                url: z.ZodOptional<z.ZodURL>;
                streamUrl: z.ZodOptional<z.ZodURL>;
                assetId: z.ZodOptional<z.ZodString>;
                languageCode: z.ZodOptional<z.ZodString>;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
                endAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    width: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    height: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    format: z.ZodOptional<z.ZodString>;
                    codec: z.ZodOptional<z.ZodString>;
                    bitrate: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    fps: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    hasAudio: z.ZodOptional<z.ZodBoolean>;
                }, z.core.$strip>>;
                transcriptFormat: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>;
            appearance: z.ZodObject<{
                x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        wrapper: "wrapper";
                        element: "element";
                    }>>>;
                    radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
                }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target: string;
                    radius: number;
                } | null, string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | null>>>;
                text: z.ZodOptional<z.ZodObject<{
                    fontFamily: z.ZodString;
                    fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "px";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>;
                    fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>>;
                    fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        source: z.ZodEnum<{
                            custom: "custom";
                            google: "google";
                        }>;
                        family: z.ZodOptional<z.ZodString>;
                        category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                        subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>>>;
                    lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    textAlign: z.ZodEnum<{
                        center: "center";
                        left: "left";
                        right: "right";
                        justify: "justify";
                    }>;
                    textTransform: z.ZodOptional<z.ZodEnum<{
                        none: "none";
                        uppercase: "uppercase";
                        lowercase: "lowercase";
                        capitalize: "capitalize";
                    }>>;
                    shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodOptional<z.ZodString>;
                        blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodString;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                            solid: "solid";
                            dashed: "dashed";
                            dotted: "dotted";
                        }>>>;
                        dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    }, z.core.$strip>>>;
                    activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>>;
                }, z.core.$strip>>;
                verticalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    top: "top";
                    bottom: "bottom";
                }>>;
                horizontalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                }>>;
                backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>;
            volume: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            muted: z.ZodPrefault<z.ZodBoolean>;
            playback: z.ZodOptional<z.ZodObject<{
                autoplay: z.ZodPrefault<z.ZodBoolean>;
                loop: z.ZodPrefault<z.ZodBoolean>;
                playbackRate: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                startAt: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                endAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>>;
            crop: z.ZodOptional<z.ZodObject<{
                x: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                y: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                width: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                height: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>>;
        }, z.core.$strict>, z.ZodObject<{
            id: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            timeline: z.ZodObject<{
                startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
                endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            }, z.core.$strip>;
            animations: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        id: z.ZodString;
                        presetId: z.ZodOptional<z.ZodString>;
                        version: z.ZodOptional<z.ZodString>;
                        description: z.ZodOptional<z.ZodString>;
                        duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                        setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"style">;
                            properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"splitText">;
                            by: z.ZodEnum<{
                                words: "words";
                                lines: "lines";
                                chars: "chars";
                            }>;
                        }, z.core.$strip>], "type">>>>;
                        revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        timeline: z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            target: z.ZodOptional<z.ZodString>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            tweens: z.ZodArray<z.ZodObject<{
                                method: z.ZodEnum<{
                                    set: "set";
                                    to: "to";
                                    from: "from";
                                    fromTo: "fromTo";
                                }>;
                                position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                    anchor: z.ZodString;
                                    anchorPoint: z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                    }>>;
                                    alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                        center: "center";
                                    }>>>;
                                    offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                                }, z.core.$strip>]>>;
                                vars: z.ZodObject<{
                                    from: z.ZodOptional<z.ZodObject<{
                                        opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                    }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>>>;
                                    duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                        type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                        dataKey: z.ZodOptional<z.ZodString>;
                                        referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                        each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                        from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                        grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                        axis: z.ZodOptional<z.ZodEnum<{
                                            x: "x";
                                            y: "y";
                                        }>>;
                                        ease: z.ZodOptional<z.ZodString>;
                                        amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodAny>>;
                            }, z.core.$strip>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>, z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        tween: z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>;
                        target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                    }, z.core.$strip>]>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                }, z.core.$strip>>>;
                subtitlesSeed: z.ZodOptional<z.ZodInt>;
            }, z.core.$strip>>;
            effects: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"colorAdjustment">;
                    brightness: z.ZodPrefault<z.ZodNumber>;
                    contrast: z.ZodPrefault<z.ZodNumber>;
                    saturation: z.ZodPrefault<z.ZodNumber>;
                    hue: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>], "type">, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"layoutSplit">;
                    pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"rotationRandomizer">;
                    maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animate: z.ZodPrefault<z.ZodBoolean>;
                    seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"fillBackgroundBlur">;
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    type: z.ZodLiteral<"textShadow">;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    type: z.ZodLiteral<"textOutline">;
                }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>, any[] | Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>>>>;
            }, z.core.$strip>>;
            visible: z.ZodPrefault<z.ZodBoolean>;
            order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            checksum: z.ZodOptional<z.ZodString>;
            type: z.ZodLiteral<"SHAPE">;
            shape: z.ZodUnion<readonly [z.ZodObject<{
                type: z.ZodLiteral<"progress">;
                progressConfig: z.ZodPrefault<z.ZodOptional<z.ZodDiscriminatedUnion<[z.ZodObject<{
                    type: z.ZodLiteral<"linear">;
                    direction: z.ZodPrefault<z.ZodEnum<{
                        horizontal: "horizontal";
                        vertical: "vertical";
                    }>>;
                    reverse: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    anchor: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        start: "start";
                        end: "end";
                        center: "center";
                    }>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"perimeter">;
                    startCorner: z.ZodPrefault<z.ZodEnum<{
                        "top-left": "top-left";
                        "top-right": "top-right";
                        "bottom-right": "bottom-right";
                        "bottom-left": "bottom-left";
                    }>>;
                    clockwise: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    strokeWidth: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"radial">;
                    startAngle: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    clockwise: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    innerRadius: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    strokeWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    capStyle: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        butt: "butt";
                        round: "round";
                        square: "square";
                    }>>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"double">;
                    paths: z.ZodArray<z.ZodObject<{
                        direction: z.ZodEnum<{
                            horizontal: "horizontal";
                            vertical: "vertical";
                        }>;
                        position: z.ZodEnum<{
                            left: "left";
                            right: "right";
                            top: "top";
                            bottom: "bottom";
                        }>;
                        reverse: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        offset: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    }, z.core.$strip>>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"custom">;
                    pathData: z.ZodString;
                    strokeWidth: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    capStyle: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        butt: "butt";
                        round: "round";
                        square: "square";
                    }>>>;
                }, z.core.$strip>], "type">>>;
            }, z.core.$strip>, z.ZodObject<{
                type: z.ZodEnum<{
                    path: "path";
                    ellipse: "ellipse";
                    circle: "circle";
                    rectangle: "rectangle";
                    triangle: "triangle";
                    polygon: "polygon";
                    star: "star";
                }>;
                points: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    x: z.ZodNumber;
                    y: z.ZodNumber;
                }, z.core.$strip>>>;
                pathData: z.ZodOptional<z.ZodString>;
                cornerRadius: z.ZodOptional<z.ZodNumber>;
            }, z.core.$strip>]>;
            appearance: z.ZodObject<{
                x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        wrapper: "wrapper";
                        element: "element";
                    }>>>;
                    radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
                }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target: string;
                    radius: number;
                } | null, string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | null>>>;
                text: z.ZodOptional<z.ZodObject<{
                    fontFamily: z.ZodString;
                    fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "px";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>;
                    fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>>;
                    fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        source: z.ZodEnum<{
                            custom: "custom";
                            google: "google";
                        }>;
                        family: z.ZodOptional<z.ZodString>;
                        category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                        subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>>>;
                    lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    textAlign: z.ZodEnum<{
                        center: "center";
                        left: "left";
                        right: "right";
                        justify: "justify";
                    }>;
                    textTransform: z.ZodOptional<z.ZodEnum<{
                        none: "none";
                        uppercase: "uppercase";
                        lowercase: "lowercase";
                        capitalize: "capitalize";
                    }>>;
                    shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodOptional<z.ZodString>;
                        blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodString;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                            solid: "solid";
                            dashed: "dashed";
                            dotted: "dotted";
                        }>>>;
                        dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    }, z.core.$strip>>>;
                    activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>>;
                }, z.core.$strip>>;
                verticalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    top: "top";
                    bottom: "bottom";
                }>>;
                horizontalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                }>>;
                backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>;
            }, z.core.$strip>;
        }, z.core.$strict>, z.ZodObject<{
            id: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            timeline: z.ZodObject<{
                startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
                endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            }, z.core.$strip>;
            animations: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        id: z.ZodString;
                        presetId: z.ZodOptional<z.ZodString>;
                        version: z.ZodOptional<z.ZodString>;
                        description: z.ZodOptional<z.ZodString>;
                        duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                        setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"style">;
                            properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"splitText">;
                            by: z.ZodEnum<{
                                words: "words";
                                lines: "lines";
                                chars: "chars";
                            }>;
                        }, z.core.$strip>], "type">>>>;
                        revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        timeline: z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            target: z.ZodOptional<z.ZodString>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            tweens: z.ZodArray<z.ZodObject<{
                                method: z.ZodEnum<{
                                    set: "set";
                                    to: "to";
                                    from: "from";
                                    fromTo: "fromTo";
                                }>;
                                position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                    anchor: z.ZodString;
                                    anchorPoint: z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                    }>>;
                                    alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                        center: "center";
                                    }>>>;
                                    offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                                }, z.core.$strip>]>>;
                                vars: z.ZodObject<{
                                    from: z.ZodOptional<z.ZodObject<{
                                        opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                    }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>>>;
                                    duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                        type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                        dataKey: z.ZodOptional<z.ZodString>;
                                        referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                        each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                        from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                        grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                        axis: z.ZodOptional<z.ZodEnum<{
                                            x: "x";
                                            y: "y";
                                        }>>;
                                        ease: z.ZodOptional<z.ZodString>;
                                        amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodAny>>;
                            }, z.core.$strip>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>, z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        tween: z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>;
                        target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                    }, z.core.$strip>]>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                }, z.core.$strip>>>;
                subtitlesSeed: z.ZodOptional<z.ZodInt>;
            }, z.core.$strip>>;
            effects: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"colorAdjustment">;
                    brightness: z.ZodPrefault<z.ZodNumber>;
                    contrast: z.ZodPrefault<z.ZodNumber>;
                    saturation: z.ZodPrefault<z.ZodNumber>;
                    hue: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>], "type">, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"layoutSplit">;
                    pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"rotationRandomizer">;
                    maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animate: z.ZodPrefault<z.ZodBoolean>;
                    seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"fillBackgroundBlur">;
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    type: z.ZodLiteral<"textShadow">;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    type: z.ZodLiteral<"textOutline">;
                }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>, any[] | Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>>>>;
            }, z.core.$strip>>;
            visible: z.ZodPrefault<z.ZodBoolean>;
            order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            checksum: z.ZodOptional<z.ZodString>;
            type: z.ZodLiteral<"AUDIO">;
            source: z.ZodObject<{
                url: z.ZodOptional<z.ZodURL>;
                streamUrl: z.ZodOptional<z.ZodURL>;
                assetId: z.ZodOptional<z.ZodString>;
                languageCode: z.ZodOptional<z.ZodString>;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
                endAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    width: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    height: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    format: z.ZodOptional<z.ZodString>;
                    codec: z.ZodOptional<z.ZodString>;
                    bitrate: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    fps: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    hasAudio: z.ZodOptional<z.ZodBoolean>;
                }, z.core.$strip>>;
                transcriptFormat: z.ZodOptional<z.ZodString>;
            }, z.core.$strip>;
            appearance: z.ZodObject<{
                x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        wrapper: "wrapper";
                        element: "element";
                    }>>>;
                    radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
                }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target: string;
                    radius: number;
                } | null, string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | null>>>;
                text: z.ZodOptional<z.ZodObject<{
                    fontFamily: z.ZodString;
                    fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "px";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>;
                    fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>>;
                    fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        source: z.ZodEnum<{
                            custom: "custom";
                            google: "google";
                        }>;
                        family: z.ZodOptional<z.ZodString>;
                        category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                        subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>>>;
                    lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    textAlign: z.ZodEnum<{
                        center: "center";
                        left: "left";
                        right: "right";
                        justify: "justify";
                    }>;
                    textTransform: z.ZodOptional<z.ZodEnum<{
                        none: "none";
                        uppercase: "uppercase";
                        lowercase: "lowercase";
                        capitalize: "capitalize";
                    }>>;
                    shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodOptional<z.ZodString>;
                        blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodString;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                            solid: "solid";
                            dashed: "dashed";
                            dotted: "dotted";
                        }>>>;
                        dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    }, z.core.$strip>>>;
                    activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>>;
                }, z.core.$strip>>;
                verticalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    top: "top";
                    bottom: "bottom";
                }>>;
                horizontalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                }>>;
                backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
            }, z.core.$strip>;
            volume: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            muted: z.ZodPrefault<z.ZodBoolean>;
        }, z.core.$strict>, z.ZodObject<{
            id: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            timeline: z.ZodObject<{
                startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
                endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            }, z.core.$strip>;
            animations: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        id: z.ZodString;
                        presetId: z.ZodOptional<z.ZodString>;
                        version: z.ZodOptional<z.ZodString>;
                        description: z.ZodOptional<z.ZodString>;
                        duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                        setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"style">;
                            properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"splitText">;
                            by: z.ZodEnum<{
                                words: "words";
                                lines: "lines";
                                chars: "chars";
                            }>;
                        }, z.core.$strip>], "type">>>>;
                        revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        timeline: z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            target: z.ZodOptional<z.ZodString>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            tweens: z.ZodArray<z.ZodObject<{
                                method: z.ZodEnum<{
                                    set: "set";
                                    to: "to";
                                    from: "from";
                                    fromTo: "fromTo";
                                }>;
                                position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                    anchor: z.ZodString;
                                    anchorPoint: z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                    }>>;
                                    alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                        center: "center";
                                    }>>>;
                                    offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                                }, z.core.$strip>]>>;
                                vars: z.ZodObject<{
                                    from: z.ZodOptional<z.ZodObject<{
                                        opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                    }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>>>;
                                    duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                        type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                        dataKey: z.ZodOptional<z.ZodString>;
                                        referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                        each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                        from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                        grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                        axis: z.ZodOptional<z.ZodEnum<{
                                            x: "x";
                                            y: "y";
                                        }>>;
                                        ease: z.ZodOptional<z.ZodString>;
                                        amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodAny>>;
                            }, z.core.$strip>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>, z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        tween: z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>;
                        target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                    }, z.core.$strip>]>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                }, z.core.$strip>>>;
                subtitlesSeed: z.ZodOptional<z.ZodInt>;
            }, z.core.$strip>>;
            effects: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"colorAdjustment">;
                    brightness: z.ZodPrefault<z.ZodNumber>;
                    contrast: z.ZodPrefault<z.ZodNumber>;
                    saturation: z.ZodPrefault<z.ZodNumber>;
                    hue: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>], "type">, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"layoutSplit">;
                    pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"rotationRandomizer">;
                    maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animate: z.ZodPrefault<z.ZodBoolean>;
                    seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"fillBackgroundBlur">;
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    type: z.ZodLiteral<"textShadow">;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    type: z.ZodLiteral<"textOutline">;
                }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>, any[] | Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>>>>;
            }, z.core.$strip>>;
            visible: z.ZodPrefault<z.ZodBoolean>;
            order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            checksum: z.ZodOptional<z.ZodString>;
            type: z.ZodLiteral<"COLOR">;
            appearance: z.ZodObject<{
                x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                text: z.ZodOptional<z.ZodObject<{
                    fontFamily: z.ZodString;
                    fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "px";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>;
                    fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>>;
                    fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        source: z.ZodEnum<{
                            custom: "custom";
                            google: "google";
                        }>;
                        family: z.ZodOptional<z.ZodString>;
                        category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                        subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>>>;
                    lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    textAlign: z.ZodEnum<{
                        center: "center";
                        left: "left";
                        right: "right";
                        justify: "justify";
                    }>;
                    textTransform: z.ZodOptional<z.ZodEnum<{
                        none: "none";
                        uppercase: "uppercase";
                        lowercase: "lowercase";
                        capitalize: "capitalize";
                    }>>;
                    shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodOptional<z.ZodString>;
                        blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodString;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                            solid: "solid";
                            dashed: "dashed";
                            dotted: "dotted";
                        }>>>;
                        dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    }, z.core.$strip>>>;
                    activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>>;
                }, z.core.$strip>>;
                verticalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    top: "top";
                    bottom: "bottom";
                }>>;
                horizontalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                }>>;
                backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                background: z.ZodString;
            }, z.core.$strip>;
        }, z.core.$strict>, z.ZodObject<{
            id: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            timeline: z.ZodObject<{
                startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
                endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            }, z.core.$strip>;
            animations: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        id: z.ZodString;
                        presetId: z.ZodOptional<z.ZodString>;
                        version: z.ZodOptional<z.ZodString>;
                        description: z.ZodOptional<z.ZodString>;
                        duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                        setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"style">;
                            properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"splitText">;
                            by: z.ZodEnum<{
                                words: "words";
                                lines: "lines";
                                chars: "chars";
                            }>;
                        }, z.core.$strip>], "type">>>>;
                        revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        timeline: z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            target: z.ZodOptional<z.ZodString>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            tweens: z.ZodArray<z.ZodObject<{
                                method: z.ZodEnum<{
                                    set: "set";
                                    to: "to";
                                    from: "from";
                                    fromTo: "fromTo";
                                }>;
                                position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                    anchor: z.ZodString;
                                    anchorPoint: z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                    }>>;
                                    alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                        center: "center";
                                    }>>>;
                                    offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                                }, z.core.$strip>]>>;
                                vars: z.ZodObject<{
                                    from: z.ZodOptional<z.ZodObject<{
                                        opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                    }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>>>;
                                    duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                        type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                        dataKey: z.ZodOptional<z.ZodString>;
                                        referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                        each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                        from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                        grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                        axis: z.ZodOptional<z.ZodEnum<{
                                            x: "x";
                                            y: "y";
                                        }>>;
                                        ease: z.ZodOptional<z.ZodString>;
                                        amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodAny>>;
                            }, z.core.$strip>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>, z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        tween: z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>;
                        target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                    }, z.core.$strip>]>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                }, z.core.$strip>>>;
                subtitlesSeed: z.ZodOptional<z.ZodInt>;
            }, z.core.$strip>>;
            effects: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"colorAdjustment">;
                    brightness: z.ZodPrefault<z.ZodNumber>;
                    contrast: z.ZodPrefault<z.ZodNumber>;
                    saturation: z.ZodPrefault<z.ZodNumber>;
                    hue: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>], "type">, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"layoutSplit">;
                    pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"rotationRandomizer">;
                    maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animate: z.ZodPrefault<z.ZodBoolean>;
                    seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"fillBackgroundBlur">;
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    type: z.ZodLiteral<"textShadow">;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    type: z.ZodLiteral<"textOutline">;
                }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>, any[] | Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>>>>;
            }, z.core.$strip>>;
            visible: z.ZodPrefault<z.ZodBoolean>;
            order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            checksum: z.ZodOptional<z.ZodString>;
            type: z.ZodLiteral<"GRADIENT">;
            appearance: z.ZodObject<{
                x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                text: z.ZodOptional<z.ZodObject<{
                    fontFamily: z.ZodString;
                    fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "px";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>;
                    fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>>;
                    fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        source: z.ZodEnum<{
                            custom: "custom";
                            google: "google";
                        }>;
                        family: z.ZodOptional<z.ZodString>;
                        category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                        subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>>>;
                    lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    textAlign: z.ZodEnum<{
                        center: "center";
                        left: "left";
                        right: "right";
                        justify: "justify";
                    }>;
                    textTransform: z.ZodOptional<z.ZodEnum<{
                        none: "none";
                        uppercase: "uppercase";
                        lowercase: "lowercase";
                        capitalize: "capitalize";
                    }>>;
                    shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodOptional<z.ZodString>;
                        blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodString;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                            solid: "solid";
                            dashed: "dashed";
                            dotted: "dotted";
                        }>>>;
                        dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    }, z.core.$strip>>>;
                    activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>>;
                }, z.core.$strip>>;
                verticalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    top: "top";
                    bottom: "bottom";
                }>>;
                horizontalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                }>>;
                backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                background: z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>;
            }, z.core.$strip>;
        }, z.core.$strict>, z.ZodObject<{
            id: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            timeline: z.ZodObject<{
                startAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
                endAt: z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number, number>>;
            }, z.core.$strip>;
            animations: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                list: z.ZodPrefault<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    startAt: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animation: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        id: z.ZodString;
                        presetId: z.ZodOptional<z.ZodString>;
                        version: z.ZodOptional<z.ZodString>;
                        description: z.ZodOptional<z.ZodString>;
                        duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        data: z.ZodOptional<z.ZodPrefault<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                        setup: z.ZodOptional<z.ZodPrefault<z.ZodArray<z.ZodDiscriminatedUnion<[z.ZodObject<{
                            type: z.ZodLiteral<"style">;
                            properties: z.ZodObject<{}, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                fromData: z.ZodString;
                                mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    cycle: "cycle";
                                    useFallback: "useFallback";
                                    clamp: "clamp";
                                }>>>;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>, z.ZodObject<{
                                type: z.ZodLiteral<"byIndex">;
                                expression: z.ZodString;
                                fallbackValue: z.ZodOptional<z.ZodAny>;
                            }, z.core.$strip>]>>>;
                        }, z.core.$strip>, z.ZodObject<{
                            type: z.ZodLiteral<"splitText">;
                            by: z.ZodEnum<{
                                words: "words";
                                lines: "lines";
                                chars: "chars";
                            }>;
                        }, z.core.$strip>], "type">>>>;
                        revertAfterComplete: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        timeline: z.ZodArray<z.ZodObject<{
                            id: z.ZodOptional<z.ZodString>;
                            target: z.ZodOptional<z.ZodString>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            tweens: z.ZodArray<z.ZodObject<{
                                method: z.ZodEnum<{
                                    set: "set";
                                    to: "to";
                                    from: "from";
                                    fromTo: "fromTo";
                                }>;
                                position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                    anchor: z.ZodString;
                                    anchorPoint: z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                    }>>;
                                    alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        start: "start";
                                        end: "end";
                                        center: "center";
                                    }>>>;
                                    offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                                }, z.core.$strip>]>>;
                                vars: z.ZodObject<{
                                    from: z.ZodOptional<z.ZodObject<{
                                        opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                        color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                            fromData: z.ZodString;
                                            mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                                cycle: "cycle";
                                                useFallback: "useFallback";
                                                clamp: "clamp";
                                            }>>>;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>, z.ZodObject<{
                                            type: z.ZodLiteral<"byIndex">;
                                            expression: z.ZodString;
                                            fallbackValue: z.ZodOptional<z.ZodAny>;
                                        }, z.core.$strip>]>>;
                                    }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>>>;
                                    duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                        type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                        dataKey: z.ZodOptional<z.ZodString>;
                                        referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                        each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                        from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                        grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                        axis: z.ZodOptional<z.ZodEnum<{
                                            x: "x";
                                            y: "y";
                                        }>>;
                                        ease: z.ZodOptional<z.ZodString>;
                                        amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodAny>>;
                            }, z.core.$strip>>;
                        }, z.core.$strip>>;
                    }, z.core.$strip>, z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        tween: z.ZodObject<{
                            method: z.ZodEnum<{
                                set: "set";
                                to: "to";
                                from: "from";
                                fromTo: "fromTo";
                            }>;
                            position: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodObject<{
                                anchor: z.ZodString;
                                anchorPoint: z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                }>>;
                                alignTween: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                    start: "start";
                                    end: "end";
                                    center: "center";
                                }>>>;
                                offset: z.ZodPrefault<z.ZodOptional<z.ZodString>>;
                            }, z.core.$strip>]>>;
                            vars: z.ZodObject<{
                                from: z.ZodOptional<z.ZodObject<{
                                    opacity: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    x: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    y: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scale: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleX: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    scaleY: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    rotation: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    width: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    height: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                    color: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                        fromData: z.ZodString;
                                        mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                            cycle: "cycle";
                                            useFallback: "useFallback";
                                            clamp: "clamp";
                                        }>>>;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>, z.ZodObject<{
                                        type: z.ZodLiteral<"byIndex">;
                                        expression: z.ZodString;
                                        fallbackValue: z.ZodOptional<z.ZodAny>;
                                    }, z.core.$strip>]>>;
                                }, z.core.$catchall<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>>>;
                                duration: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                ease: z.ZodOptional<z.ZodString>;
                                delay: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull, z.ZodObject<{
                                    fromData: z.ZodString;
                                    mode: z.ZodPrefault<z.ZodOptional<z.ZodEnum<{
                                        cycle: "cycle";
                                        useFallback: "useFallback";
                                        clamp: "clamp";
                                    }>>>;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>, z.ZodObject<{
                                    type: z.ZodLiteral<"byIndex">;
                                    expression: z.ZodString;
                                    fallbackValue: z.ZodOptional<z.ZodAny>;
                                }, z.core.$strip>]>>;
                                stagger: z.ZodOptional<z.ZodUnion<readonly [z.ZodNumber, z.ZodObject<{
                                    type: z.ZodOptional<z.ZodLiteral<"fromData">>;
                                    dataKey: z.ZodOptional<z.ZodString>;
                                    referencePoint: z.ZodOptional<z.ZodLiteral<"tweenStart">>;
                                    each: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                    from: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>>;
                                    grid: z.ZodOptional<z.ZodTuple<[z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>, z.ZodUnion<readonly [z.ZodLiteral<"auto">, z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>]>], null>>;
                                    axis: z.ZodOptional<z.ZodEnum<{
                                        x: "x";
                                        y: "y";
                                    }>>;
                                    ease: z.ZodOptional<z.ZodString>;
                                    amount: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                                }, z.core.$strip>]>>;
                            }, z.core.$catchall<z.ZodAny>>;
                        }, z.core.$strip>;
                        target: z.ZodOptional<z.ZodPrefault<z.ZodString>>;
                    }, z.core.$strip>]>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                }, z.core.$strip>>>;
                subtitlesSeed: z.ZodOptional<z.ZodInt>;
            }, z.core.$strip>>;
            effects: z.ZodPrefault<z.ZodObject<{
                enabled: z.ZodPrefault<z.ZodOptional<z.ZodBoolean>>;
                map: z.ZodPrefault<z.ZodPipe<z.ZodUnion<readonly [z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodDiscriminatedUnion<[z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"colorAdjustment">;
                    brightness: z.ZodPrefault<z.ZodNumber>;
                    contrast: z.ZodPrefault<z.ZodNumber>;
                    saturation: z.ZodPrefault<z.ZodNumber>;
                    hue: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>], "type">, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"layoutSplit">;
                    pieces: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneWidth: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    sceneHeight: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    chunks: z.ZodOptional<z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"rotationRandomizer">;
                    maxRotation: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    animate: z.ZodPrefault<z.ZodBoolean>;
                    seed: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    type: z.ZodLiteral<"blur">;
                    radius: z.ZodPrefault<z.ZodNumber>;
                }, z.core.$strip>, z.ZodObject<{
                    type: z.ZodLiteral<"fillBackgroundBlur">;
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    blurAmount: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodOptional<z.ZodString>;
                    blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    type: z.ZodLiteral<"textShadow">;
                }, z.core.$strip>, z.ZodObject<{
                    intensity: z.ZodPrefault<z.ZodNumber>;
                    blendMode: z.ZodPrefault<z.ZodEnum<{
                        color: "color";
                        normal: "normal";
                        multiply: "multiply";
                        screen: "screen";
                        overlay: "overlay";
                        darken: "darken";
                        lighten: "lighten";
                        "color-dodge": "color-dodge";
                        "color-burn": "color-burn";
                        "hard-light": "hard-light";
                        "soft-light": "soft-light";
                        difference: "difference";
                        exclusion: "exclusion";
                        hue: "hue";
                        saturation: "saturation";
                        luminosity: "luminosity";
                    }>>;
                    enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                    preset: z.ZodOptional<z.ZodString>;
                    color: z.ZodString;
                    size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        solid: "solid";
                        dashed: "dashed";
                        dotted: "dotted";
                    }>>>;
                    dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    type: z.ZodLiteral<"textOutline">;
                }, z.core.$strip>]>>, z.ZodArray<z.ZodAny>]>, z.ZodTransform<Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>, any[] | Record<string, {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "blur";
                    radius: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "colorAdjustment";
                    brightness: number;
                    contrast: number;
                    saturation: number;
                    hue: number;
                    enabled?: boolean | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "layoutSplit";
                    enabled?: boolean | undefined;
                    pieces?: number | undefined;
                    sceneWidth?: number | undefined;
                    sceneHeight?: number | undefined;
                    chunks?: Record<string, any>[] | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "rotationRandomizer";
                    maxRotation: number;
                    animate: boolean;
                    enabled?: boolean | undefined;
                    seed?: number | undefined;
                } | {
                    type: "fillBackgroundBlur";
                    enabled: boolean;
                    blurAmount: number;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    type: "textShadow";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    color?: string | undefined;
                    blur?: number | undefined;
                    size?: number | undefined;
                    offsetX?: number | undefined;
                    offsetY?: number | undefined;
                    opacity?: number | undefined;
                } | {
                    intensity: number;
                    blendMode: "color" | "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "luminosity";
                    color: string;
                    type: "textOutline";
                    enabled?: boolean | undefined;
                    preset?: string | undefined;
                    size?: number | undefined;
                    opacity?: number | undefined;
                    style?: "solid" | "dashed" | "dotted" | undefined;
                    dashArray?: number[] | undefined;
                }>>>>;
            }, z.core.$strip>>;
            visible: z.ZodPrefault<z.ZodBoolean>;
            order: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            checksum: z.ZodOptional<z.ZodString>;
            type: z.ZodLiteral<"SUBTITLES">;
            source: z.ZodOptional<z.ZodObject<{
                streamUrl: z.ZodOptional<z.ZodURL>;
                assetId: z.ZodOptional<z.ZodString>;
                languageCode: z.ZodOptional<z.ZodString>;
                startAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
                endAt: z.ZodOptional<z.ZodPipe<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>, z.ZodTransform<number | null | undefined, number>>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    width: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    height: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    duration: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    format: z.ZodOptional<z.ZodString>;
                    codec: z.ZodOptional<z.ZodString>;
                    bitrate: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    fps: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    hasAudio: z.ZodOptional<z.ZodBoolean>;
                }, z.core.$strip>>;
                transcriptFormat: z.ZodOptional<z.ZodString>;
                url: z.ZodOptional<z.ZodURL>;
            }, z.core.$strip>>;
            timingAnchor: z.ZodObject<{
                mode: z.ZodEnum<{
                    ASSET_USAGE: "ASSET_USAGE";
                    COMPONENT: "COMPONENT";
                }>;
                assetId: z.ZodOptional<z.ZodString>;
                layerId: z.ZodOptional<z.ZodString>;
                componentId: z.ZodOptional<z.ZodString>;
                offset: z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
            }, z.core.$strip>;
            text: z.ZodOptional<z.ZodString>;
            appearance: z.ZodObject<{
                x: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                y: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                width: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                height: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                opacity: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                rotation: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleX: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                scaleY: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                background: z.ZodOptional<z.ZodPipe<z.ZodUnion<readonly [z.ZodObject<{
                    enabled: z.ZodPrefault<z.ZodBoolean>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    target: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                        wrapper: "wrapper";
                        element: "element";
                    }>>>;
                    radius: z.ZodOptional<z.ZodPrefault<z.ZodNumber>>;
                }, z.core.$strip>, z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>, z.ZodNull]>, z.ZodTransform<{
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target: string;
                    radius: number;
                } | null, string | {
                    type: "linear" | "radial";
                    colors: string[];
                    stops?: number[] | undefined;
                    angle?: number | undefined;
                    position?: string | undefined;
                    shape?: "ellipse" | "circle" | undefined;
                } | {
                    enabled: boolean;
                    color: string | {
                        type: "linear" | "radial";
                        colors: string[];
                        stops?: number[] | undefined;
                        angle?: number | undefined;
                        position?: string | undefined;
                        shape?: "ellipse" | "circle" | undefined;
                    };
                    target?: "wrapper" | "element" | undefined;
                    radius?: number | undefined;
                } | null>>>;
                backgroundAlwaysVisible: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                text: z.ZodObject<{
                    fontFamily: z.ZodString;
                    fontSize: z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "px";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>;
                    fontWeight: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
                        normal: "normal";
                        bold: "bold";
                        bolder: "bolder";
                        lighter: "lighter";
                        100: "100";
                        200: "200";
                        300: "300";
                        400: "400";
                        500: "500";
                        600: "600";
                        700: "700";
                        800: "800";
                        900: "900";
                    }>>>;
                    fontSource: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        id: z.ZodOptional<z.ZodString>;
                        source: z.ZodEnum<{
                            custom: "custom";
                            google: "google";
                        }>;
                        family: z.ZodOptional<z.ZodString>;
                        category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                        subsets: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        variants: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodString>>>;
                        fileUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                    }, z.core.$strip>>>;
                    lineHeight: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    letterSpacing: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodPipe<z.ZodNumber, z.ZodTransform<{
                        value: number;
                        unit: "em";
                    }, number>>, z.ZodObject<{
                        value: z.ZodNumber;
                        unit: z.ZodPrefault<z.ZodEnum<{
                            px: "px";
                            em: "em";
                            rem: "rem";
                            "%": "%";
                        }>>;
                    }, z.core.$strip>]>>>;
                    color: z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>;
                    textAlign: z.ZodEnum<{
                        center: "center";
                        left: "left";
                        right: "right";
                        justify: "justify";
                    }>;
                    textTransform: z.ZodOptional<z.ZodEnum<{
                        none: "none";
                        uppercase: "uppercase";
                        lowercase: "lowercase";
                        capitalize: "capitalize";
                    }>>;
                    shadow: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodOptional<z.ZodString>;
                        blur: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        offsetY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    outline: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                        preset: z.ZodOptional<z.ZodString>;
                        color: z.ZodString;
                        size: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        opacity: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        style: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                            solid: "solid";
                            dashed: "dashed";
                            dotted: "dotted";
                        }>>>;
                        dashArray: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    }, z.core.$strip>>>;
                    activeLine: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    activeWord: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                        enabled: z.ZodBoolean;
                        color: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        backgroundColor: z.ZodOptional<z.ZodNullable<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                            type: z.ZodEnum<{
                                linear: "linear";
                                radial: "radial";
                            }>;
                            colors: z.ZodArray<z.ZodString>;
                            stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                            angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                            position: z.ZodOptional<z.ZodString>;
                            shape: z.ZodOptional<z.ZodEnum<{
                                ellipse: "ellipse";
                                circle: "circle";
                            }>>;
                        }, z.core.$strip>]>>>;
                        fontWeight: z.ZodOptional<z.ZodEnum<{
                            normal: "normal";
                            bold: "bold";
                            bolder: "bolder";
                            lighter: "lighter";
                            100: "100";
                            200: "200";
                            300: "300";
                            400: "400";
                            500: "500";
                            600: "600";
                            700: "700";
                            800: "800";
                            900: "900";
                        }>>;
                        scale: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingX: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundPaddingY: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        backgroundBorderRadius: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    }, z.core.$strip>>>;
                    highlightColors: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                        type: z.ZodEnum<{
                            linear: "linear";
                            radial: "radial";
                        }>;
                        colors: z.ZodArray<z.ZodString>;
                        stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                        angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                        position: z.ZodOptional<z.ZodString>;
                        shape: z.ZodOptional<z.ZodEnum<{
                            ellipse: "ellipse";
                            circle: "circle";
                        }>>;
                    }, z.core.$strip>]>>>>;
                }, z.core.$strip>;
                verticalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    top: "top";
                    bottom: "bottom";
                }>>;
                horizontalAlign: z.ZodOptional<z.ZodEnum<{
                    center: "center";
                    left: "left";
                    right: "right";
                }>>;
                hasAIEmojis: z.ZodOptional<z.ZodPrefault<z.ZodBoolean>>;
                aiEmojisPlacement: z.ZodOptional<z.ZodPrefault<z.ZodEnum<{
                    top: "top";
                    bottom: "bottom";
                }>>>;
                aiEmojisPlacementOffset: z.ZodOptional<z.ZodPrefault<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                aiEmojis: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    text: z.ZodString;
                    emoji: z.ZodString;
                    startAt: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                    endAt: z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>;
                    componentId: z.ZodOptional<z.ZodString>;
                }, z.core.$strip>>>;
                highlighterColor1: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>;
                highlighterColor2: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>;
                highlighterColor3: z.ZodOptional<z.ZodUnion<readonly [z.ZodString, z.ZodObject<{
                    type: z.ZodEnum<{
                        linear: "linear";
                        radial: "radial";
                    }>;
                    colors: z.ZodArray<z.ZodString>;
                    stops: z.ZodOptional<z.ZodArray<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>>;
                    angle: z.ZodOptional<z.ZodPipe<z.ZodTransform<unknown, unknown>, z.ZodCoercedNumber<unknown>>>;
                    position: z.ZodOptional<z.ZodString>;
                    shape: z.ZodOptional<z.ZodEnum<{
                        ellipse: "ellipse";
                        circle: "circle";
                    }>>;
                }, z.core.$strip>]>>;
            }, z.core.$strip>;
        }, z.core.$strict>], "type">>>;
    }, z.core.$strip>>>;
    /** Scene transitions */
    transitions: z.ZodPrefault<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        fromComponentId: z.ZodString;
        toComponentId: z.ZodString;
        type: z.ZodString;
        presetId: z.ZodOptional<z.ZodString>;
        duration: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, z.core.$strip>>>;
    /** Audio tracks */
    audioTracks: z.ZodPrefault<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        url: z.ZodString;
        volume: z.ZodPrefault<z.ZodNumber>;
        startAt: z.ZodPipe<z.ZodNumber, z.ZodTransform<number, number>>;
        endAt: z.ZodPipe<z.ZodOptional<z.ZodNumber>, z.ZodTransform<number | undefined, number | undefined>>;
        muted: z.ZodPrefault<z.ZodBoolean>;
    }, z.core.$strip>>>;
    /** Optional checksum */
    checksum: z.ZodOptional<z.ZodString>;
}, z.core.$strict>;
export type SceneAssetMetadata = z.infer<typeof SceneAssetMetadataShape>;
export type SceneAsset = z.infer<typeof SceneAssetShape>;
export type SceneSettings = z.infer<typeof SceneSettingsShape>;
export type SceneSubtitlesSettings = z.infer<typeof SceneSubtitlesSettingsShape>;
export type SceneLayer = z.infer<typeof SceneLayerShape>;
export type AudioTrack = z.infer<typeof AudioTrackShape>;
export type SceneTransition = z.infer<typeof SceneTransitionShape>;
export type Scene = z.infer<typeof SceneShape>;
export type SceneInput = z.input<typeof SceneShape>;
export type SceneLayerInput = z.input<typeof SceneLayerShape>;
export type AudioTrackInput = z.input<typeof AudioTrackShape>;
export type SceneTransitionInput = z.input<typeof SceneTransitionShape>;
export type SceneAssetInput = z.input<typeof SceneAssetShape>;
export type SceneAssetMetadataInput = z.input<typeof SceneAssetMetadataShape>;
export type SceneSettingsInput = z.input<typeof SceneSettingsShape>;
export type RenderEnvironment = 'client' | 'server';
